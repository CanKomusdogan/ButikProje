// <auto-generated>
// ReSharper disable All

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace ButikProje.Models
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface ImasterEntities : IDisposable
    {
        DbSet<TblAdmin> TblAdmins { get; set; } // tblAdmins
        DbSet<TblArayuz> TblArayuzs { get; set; } // tblArayuz
        DbSet<TblBedenler> TblBedenlers { get; set; } // tblBedenler
        DbSet<TblButikAyarlar> TblButikAyarlars { get; set; } // tblButikAyarlar
        DbSet<TblButikKullanicilar> TblButikKullanicilars { get; set; } // tblButikKullanicilar
        DbSet<TblCihazlar> TblCihazlars { get; set; } // tblCihazlar
        DbSet<TblIletisim> TblIletisims { get; set; } // tblIletisim
        DbSet<TblKategoriler> TblKategorilers { get; set; } // tblKategoriler
        DbSet<TblPayment> TblPayments { get; set; } // tblPayment
        DbSet<TblPaymentStatu> TblPaymentStatus { get; set; } // tblPaymentStatus
        DbSet<TblSepet> TblSepets { get; set; } // tblSepet
        DbSet<TblSiparisItemler> TblSiparisItemlers { get; set; } // tblSiparisItemler
        DbSet<TblSiparisler> TblSiparislers { get; set; } // tblSiparisler
        DbSet<TblUrunBedenleri> TblUrunBedenleris { get; set; } // tblUrunBedenleri
        DbSet<TblUrunFoto> TblUrunFotoes { get; set; } // tblUrunFoto
        DbSet<TblUrunTanim> TblUrunTanims { get; set; } // tblUrunTanim

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(out int? tablesToCheck);
        // AspnetAnyDataInTablesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetAnyDataInTablesReturnModel)

        int AspnetApplicationsCreateApplication(out string applicationName, out Guid? applicationId);
        // AspnetApplicationsCreateApplicationAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetCheckSchemaVersion(out string feature, out string compatibleSchemaVersion);
        // AspnetCheckSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipChangePasswordQuestionAndAnswer(out string applicationName, out string userName, out string newPasswordQuestion, out string newPasswordAnswer);
        // AspnetMembershipChangePasswordQuestionAndAnswerAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipCreateUser(out string applicationName, out string userName, out string password, out string passwordSalt, out string email, out string passwordQuestion, out string passwordAnswer, out bool? isApproved, out DateTime? currentTimeUtc, out DateTime? createDate, out int? uniqueEmail, out int? passwordFormat, out Guid? userId);
        // AspnetMembershipCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipFindUsersByEmail(out string applicationName, out string emailToMatch, out int? pageIndex, out int? pageSize);
        // AspnetMembershipFindUsersByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipFindUsersByName(out string applicationName, out string userNameToMatch, out int? pageIndex, out int? pageSize);
        // AspnetMembershipFindUsersByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipGetAllUsers(out string applicationName, out int? pageIndex, out int? pageSize);
        // AspnetMembershipGetAllUsersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipGetNumberOfUsersOnline(out string applicationName, out int? minutesSinceLastInActive, out DateTime? currentTimeUtc);
        // AspnetMembershipGetNumberOfUsersOnlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(out string applicationName, out string userName, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out DateTime? currentTimeUtc, out string passwordAnswer);
        List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(out string applicationName, out string userName, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out DateTime? currentTimeUtc, out string passwordAnswer, out int procResult);
        // AspnetMembershipGetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetMembershipGetPasswordReturnModel>)

        List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(out string applicationName, out string userName, out bool? updateLastLoginActivityDate, out DateTime? currentTimeUtc);
        List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(out string applicationName, out string userName, out bool? updateLastLoginActivityDate, out DateTime? currentTimeUtc, out int procResult);
        // AspnetMembershipGetPasswordWithFormatAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetMembershipGetPasswordWithFormatReturnModel>)

        AspnetMembershipGetUserByEmailReturnModel AspnetMembershipGetUserByEmail(out string applicationName, out string email);
        // AspnetMembershipGetUserByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetMembershipGetUserByEmailReturnModel)

        AspnetMembershipGetUserByNameReturnModel AspnetMembershipGetUserByName(out string applicationName, out string userName, out DateTime? currentTimeUtc, out bool? updateLastActivity);
        // AspnetMembershipGetUserByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetMembershipGetUserByNameReturnModel)

        List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(out Guid? userId, out DateTime? currentTimeUtc, out bool? updateLastActivity);
        List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(out Guid? userId, out DateTime? currentTimeUtc, out bool? updateLastActivity, out int procResult);
        // AspnetMembershipGetUserByUserIdAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetMembershipGetUserByUserIdReturnModel>)

        int AspnetMembershipResetPassword(out string applicationName, out string userName, out string newPassword, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out string passwordSalt, out DateTime? currentTimeUtc, out int? passwordFormat, out string passwordAnswer);
        // AspnetMembershipResetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipSetPassword(out string applicationName, out string userName, out string newPassword, out string passwordSalt, out DateTime? currentTimeUtc, out int? passwordFormat);
        // AspnetMembershipSetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipUnlockUser(out string applicationName, out string userName);
        // AspnetMembershipUnlockUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipUpdateUser(out string applicationName, out string userName, out string email, out string comment, out bool? isApproved, out DateTime? lastLoginDate, out DateTime? lastActivityDate, out int? uniqueEmail, out DateTime? currentTimeUtc);
        // AspnetMembershipUpdateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipUpdateUserInfo(out string applicationName, out string userName, out bool? isPasswordCorrect, out bool? updateLastLoginActivityDate, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out DateTime? currentTimeUtc, out DateTime? lastLoginDate, out DateTime? lastActivityDate);
        // AspnetMembershipUpdateUserInfoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPathsCreatePath(out Guid? applicationId, out string path, out Guid? pathId);
        // AspnetPathsCreatePathAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationDeleteAllState(out bool? allUsersScope, out string applicationName, out int? count);
        // AspnetPersonalizationAdministrationDeleteAllStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationFindState(out bool? allUsersScope, out string applicationName, out int? pageIndex, out int? pageSize, out string path, out string userName, out DateTime? inactiveSinceDate);
        // AspnetPersonalizationAdministrationFindStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationGetCountOfState(out int? count, out bool? allUsersScope, out string applicationName, out string path, out string userName, out DateTime? inactiveSinceDate);
        // AspnetPersonalizationAdministrationGetCountOfStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationResetSharedState(out int? count, out string applicationName, out string path);
        // AspnetPersonalizationAdministrationResetSharedStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationResetUserState(out int? count, out string applicationName, out DateTime? inactiveSinceDate, out string userName, out string path);
        // AspnetPersonalizationAdministrationResetUserStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(out string applicationName, out string path);
        List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(out string applicationName, out string path, out int procResult);
        // AspnetPersonalizationAllUsersGetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>)

        int AspnetPersonalizationAllUsersResetPageSettings(out string applicationName, out string path);
        // AspnetPersonalizationAllUsersResetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAllUsersSetPageSettings(out string applicationName, out string path, out byte[] pageSettings, out DateTime? currentTimeUtc);
        // AspnetPersonalizationAllUsersSetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationGetApplicationId(out string applicationName, out Guid? applicationId);
        // AspnetPersonalizationGetApplicationIdAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(out string applicationName, out string userName, out string path, out DateTime? currentTimeUtc);
        List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(out string applicationName, out string userName, out string path, out DateTime? currentTimeUtc, out int procResult);
        // AspnetPersonalizationPerUserGetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetPersonalizationPerUserGetPageSettingsReturnModel>)

        int AspnetPersonalizationPerUserResetPageSettings(out string applicationName, out string userName, out string path, out DateTime? currentTimeUtc);
        // AspnetPersonalizationPerUserResetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationPerUserSetPageSettings(out string applicationName, out string userName, out string path, out byte[] pageSettings, out DateTime? currentTimeUtc);
        // AspnetPersonalizationPerUserSetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        AspnetProfileDeleteInactiveProfilesReturnModel AspnetProfileDeleteInactiveProfiles(out string applicationName, out int? profileAuthOptions, out DateTime? inactiveSinceDate);
        // AspnetProfileDeleteInactiveProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetProfileDeleteInactiveProfilesReturnModel)

        List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(out string applicationName, out string userNames);
        List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(out string applicationName, out string userNames, out int procResult);
        // AspnetProfileDeleteProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetProfileDeleteProfilesReturnModel>)

        AspnetProfileGetNumberOfInactiveProfilesReturnModel AspnetProfileGetNumberOfInactiveProfiles(out string applicationName, out int? profileAuthOptions, out DateTime? inactiveSinceDate);
        // AspnetProfileGetNumberOfInactiveProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetProfileGetNumberOfInactiveProfilesReturnModel)

        int AspnetProfileGetProfiles(out string applicationName, out int? profileAuthOptions, out int? pageIndex, out int? pageSize, out string userNameToMatch, out DateTime? inactiveSinceDate);
        // AspnetProfileGetProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(out string applicationName, out string userName, out DateTime? currentTimeUtc);
        List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(out string applicationName, out string userName, out DateTime? currentTimeUtc, out int procResult);
        // AspnetProfileGetPropertiesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetProfileGetPropertiesReturnModel>)

        int AspnetProfileSetProperties(out string applicationName, out string propertyNames, out string propertyValuesString, out byte[] propertyValuesBinary, out string userName, out bool? isUserAnonymous, out DateTime? currentTimeUtc);
        // AspnetProfileSetPropertiesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetRegisterSchemaVersion(out string feature, out string compatibleSchemaVersion, out bool? isCurrentVersion, out bool? removeIncompatibleSchema);
        // AspnetRegisterSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetRolesCreateRole(out string applicationName, out string roleName);
        // AspnetRolesCreateRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetRolesDeleteRole(out string applicationName, out string roleName, out bool? deleteOnlyIfRoleIsEmpty);
        // AspnetRolesDeleteRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(out string applicationName);
        List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(out string applicationName, out int procResult);
        // AspnetRolesGetAllRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetRolesGetAllRolesReturnModel>)

        int AspnetRolesRoleExists(out string applicationName, out string roleName);
        // AspnetRolesRoleExistsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetSetupRemoveAllRoleMembers(out string name);
        // AspnetSetupRemoveAllRoleMembersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetSetupRestorePermissions(out string name);
        // AspnetSetupRestorePermissionsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetUnRegisterSchemaVersion(out string feature, out string compatibleSchemaVersion);
        // AspnetUnRegisterSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetUsersCreateUser(out Guid? applicationId, out string userName, out bool? isUserAnonymous, out DateTime? lastActivityDate, out Guid? userId);
        // AspnetUsersCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetUsersDeleteUser(out string applicationName, out string userName, out int? tablesToDeleteFrom, out int? numTablesDeletedFrom);
        // AspnetUsersDeleteUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        AspnetUsersInRolesAddUsersToRolesReturnModel AspnetUsersInRolesAddUsersToRoles(out string applicationName, out string userNames, out string roleNames, out DateTime? currentTimeUtc);
        // AspnetUsersInRolesAddUsersToRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetUsersInRolesAddUsersToRolesReturnModel)

        List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(out string applicationName, out string roleName, out string userNameToMatch);
        List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(out string applicationName, out string roleName, out string userNameToMatch, out int procResult);
        // AspnetUsersInRolesFindUsersInRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetUsersInRolesFindUsersInRoleReturnModel>)

        List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(out string applicationName, out string userName);
        List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(out string applicationName, out string userName, out int procResult);
        // AspnetUsersInRolesGetRolesForUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetUsersInRolesGetRolesForUserReturnModel>)

        List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(out string applicationName, out string roleName);
        List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(out string applicationName, out string roleName, out int procResult);
        // AspnetUsersInRolesGetUsersInRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetUsersInRolesGetUsersInRolesReturnModel>)

        int AspnetUsersInRolesIsUserInRole(out string applicationName, out string userName, out string roleName);
        // AspnetUsersInRolesIsUserInRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        AspnetUsersInRolesRemoveUsersFromRolesReturnModel AspnetUsersInRolesRemoveUsersFromRoles(out string applicationName, out string userNames, out string roleNames);
        // AspnetUsersInRolesRemoveUsersFromRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetUsersInRolesRemoveUsersFromRolesReturnModel)

        int AspnetWebEventLogEvent(out string eventId, out DateTime? eventTimeUtc, out DateTime? eventTime, out string eventType, out decimal? eventSequence, out decimal? eventOccurrence, out int? eventCode, out int? eventDetailCode, out string message, out string applicationPath, out string applicationVirtualPath, out string machineName, out string requestUrl, out string exceptionType, out string details);
        // AspnetWebEventLogEventAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class masterEntities : DbContext, ImasterEntities
    {
        public DbSet<TblAdmin> TblAdmins { get; set; } // tblAdmins
        public DbSet<TblArayuz> TblArayuzs { get; set; } // tblArayuz
        public DbSet<TblBedenler> TblBedenlers { get; set; } // tblBedenler
        public DbSet<TblButikAyarlar> TblButikAyarlars { get; set; } // tblButikAyarlar
        public DbSet<TblButikKullanicilar> TblButikKullanicilars { get; set; } // tblButikKullanicilar
        public DbSet<TblCihazlar> TblCihazlars { get; set; } // tblCihazlar
        public DbSet<TblIletisim> TblIletisims { get; set; } // tblIletisim
        public DbSet<TblKategoriler> TblKategorilers { get; set; } // tblKategoriler
        public DbSet<TblPayment> TblPayments { get; set; } // tblPayment
        public DbSet<TblPaymentStatu> TblPaymentStatus { get; set; } // tblPaymentStatus
        public DbSet<TblSepet> TblSepets { get; set; } // tblSepet
        public DbSet<TblSiparisItemler> TblSiparisItemlers { get; set; } // tblSiparisItemler
        public DbSet<TblSiparisler> TblSiparislers { get; set; } // tblSiparisler
        public DbSet<TblUrunBedenleri> TblUrunBedenleris { get; set; } // tblUrunBedenleri
        public DbSet<TblUrunFoto> TblUrunFotoes { get; set; } // tblUrunFoto
        public DbSet<TblUrunTanim> TblUrunTanims { get; set; } // tblUrunTanim

        static masterEntities()
        {
            System.Data.Entity.Database.SetInitializer<masterEntities>(null);
        }

        /// <inheritdoc />
        public masterEntities()
            : base("Name=masterEntities")
        {
        }

        /// <inheritdoc />
        public masterEntities(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public masterEntities(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public masterEntities(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public masterEntities(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public masterEntities(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new TblAdminConfiguration());
            modelBuilder.Configurations.Add(new TblArayuzConfiguration());
            modelBuilder.Configurations.Add(new TblBedenlerConfiguration());
            modelBuilder.Configurations.Add(new TblButikAyarlarConfiguration());
            modelBuilder.Configurations.Add(new TblButikKullanicilarConfiguration());
            modelBuilder.Configurations.Add(new TblCihazlarConfiguration());
            modelBuilder.Configurations.Add(new TblIletisimConfiguration());
            modelBuilder.Configurations.Add(new TblKategorilerConfiguration());
            modelBuilder.Configurations.Add(new TblPaymentConfiguration());
            modelBuilder.Configurations.Add(new TblPaymentStatuConfiguration());
            modelBuilder.Configurations.Add(new TblSepetConfiguration());
            modelBuilder.Configurations.Add(new TblSiparisItemlerConfiguration());
            modelBuilder.Configurations.Add(new TblSiparislerConfiguration());
            modelBuilder.Configurations.Add(new TblUrunBedenleriConfiguration());
            modelBuilder.Configurations.Add(new TblUrunFotoConfiguration());
            modelBuilder.Configurations.Add(new TblUrunTanimConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new TblAdminConfiguration(schema));
            modelBuilder.Configurations.Add(new TblArayuzConfiguration(schema));
            modelBuilder.Configurations.Add(new TblBedenlerConfiguration(schema));
            modelBuilder.Configurations.Add(new TblButikAyarlarConfiguration(schema));
            modelBuilder.Configurations.Add(new TblButikKullanicilarConfiguration(schema));
            modelBuilder.Configurations.Add(new TblCihazlarConfiguration(schema));
            modelBuilder.Configurations.Add(new TblIletisimConfiguration(schema));
            modelBuilder.Configurations.Add(new TblKategorilerConfiguration(schema));
            modelBuilder.Configurations.Add(new TblPaymentConfiguration(schema));
            modelBuilder.Configurations.Add(new TblPaymentStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new TblSepetConfiguration(schema));
            modelBuilder.Configurations.Add(new TblSiparisItemlerConfiguration(schema));
            modelBuilder.Configurations.Add(new TblSiparislerConfiguration(schema));
            modelBuilder.Configurations.Add(new TblUrunBedenleriConfiguration(schema));
            modelBuilder.Configurations.Add(new TblUrunFotoConfiguration(schema));
            modelBuilder.Configurations.Add(new TblUrunTanimConfiguration(schema));

            return modelBuilder;
        }

        // Stored Procedures
        public AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(out int? tablesToCheck)
        {
            var tablesToCheckParam = new SqlParameter { ParameterName = "@TablesToCheck", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultData = new AspnetAnyDataInTablesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_AnyDataInTables]";
            cmd.Parameters.Add(tablesToCheckParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel5>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet6 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel6>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet7 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel7>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            if (IsSqlParameterNull(tablesToCheckParam))
                tablesToCheck = null;
            else
                tablesToCheck = (int) tablesToCheckParam.Value;

            return procResultData;
        }

        // AspnetAnyDataInTablesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetAnyDataInTablesReturnModel)

        public int AspnetApplicationsCreateApplication(out string applicationName, out Guid? applicationId)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var applicationIdParam = new SqlParameter { ParameterName = "@ApplicationId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Applications_CreateApplication] @ApplicationName OUTPUT, @ApplicationId OUTPUT", applicationNameParam, applicationIdParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(applicationIdParam))
                applicationId = null;
            else
                applicationId = (Guid) applicationIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetApplicationsCreateApplicationAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetCheckSchemaVersion(out string feature, out string compatibleSchemaVersion)
        {
            var featureParam = new SqlParameter { ParameterName = "@Feature", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var compatibleSchemaVersionParam = new SqlParameter { ParameterName = "@CompatibleSchemaVersion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_CheckSchemaVersion] @Feature OUTPUT, @CompatibleSchemaVersion OUTPUT", featureParam, compatibleSchemaVersionParam, procResultParam);

            if (IsSqlParameterNull(featureParam))
                feature = default(string);
            else
                feature = (string) featureParam.Value;

            if (IsSqlParameterNull(compatibleSchemaVersionParam))
                compatibleSchemaVersion = default(string);
            else
                compatibleSchemaVersion = (string) compatibleSchemaVersionParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetCheckSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipChangePasswordQuestionAndAnswer(out string applicationName, out string userName, out string newPasswordQuestion, out string newPasswordAnswer)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var newPasswordQuestionParam = new SqlParameter { ParameterName = "@NewPasswordQuestion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var newPasswordAnswerParam = new SqlParameter { ParameterName = "@NewPasswordAnswer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer] @ApplicationName OUTPUT, @UserName OUTPUT, @NewPasswordQuestion OUTPUT, @NewPasswordAnswer OUTPUT", applicationNameParam, userNameParam, newPasswordQuestionParam, newPasswordAnswerParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(newPasswordQuestionParam))
                newPasswordQuestion = default(string);
            else
                newPasswordQuestion = (string) newPasswordQuestionParam.Value;

            if (IsSqlParameterNull(newPasswordAnswerParam))
                newPasswordAnswer = default(string);
            else
                newPasswordAnswer = (string) newPasswordAnswerParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipChangePasswordQuestionAndAnswerAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipCreateUser(out string applicationName, out string userName, out string password, out string passwordSalt, out string email, out string passwordQuestion, out string passwordAnswer, out bool? isApproved, out DateTime? currentTimeUtc, out DateTime? createDate, out int? uniqueEmail, out int? passwordFormat, out Guid? userId)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var passwordParam = new SqlParameter { ParameterName = "@Password", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var passwordSaltParam = new SqlParameter { ParameterName = "@PasswordSalt", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var emailParam = new SqlParameter { ParameterName = "@Email", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var passwordQuestionParam = new SqlParameter { ParameterName = "@PasswordQuestion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var passwordAnswerParam = new SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var isApprovedParam = new SqlParameter { ParameterName = "@IsApproved", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var createDateParam = new SqlParameter { ParameterName = "@CreateDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var uniqueEmailParam = new SqlParameter { ParameterName = "@UniqueEmail", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var passwordFormatParam = new SqlParameter { ParameterName = "@PasswordFormat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var userIdParam = new SqlParameter { ParameterName = "@UserId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_CreateUser] @ApplicationName OUTPUT, @UserName OUTPUT, @Password OUTPUT, @PasswordSalt OUTPUT, @Email OUTPUT, @PasswordQuestion OUTPUT, @PasswordAnswer OUTPUT, @IsApproved OUTPUT, @CurrentTimeUtc OUTPUT, @CreateDate OUTPUT, @UniqueEmail OUTPUT, @PasswordFormat OUTPUT, @UserId OUTPUT", applicationNameParam, userNameParam, passwordParam, passwordSaltParam, emailParam, passwordQuestionParam, passwordAnswerParam, isApprovedParam, currentTimeUtcParam, createDateParam, uniqueEmailParam, passwordFormatParam, userIdParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(passwordParam))
                password = default(string);
            else
                password = (string) passwordParam.Value;

            if (IsSqlParameterNull(passwordSaltParam))
                passwordSalt = default(string);
            else
                passwordSalt = (string) passwordSaltParam.Value;

            if (IsSqlParameterNull(emailParam))
                email = default(string);
            else
                email = (string) emailParam.Value;

            if (IsSqlParameterNull(passwordQuestionParam))
                passwordQuestion = default(string);
            else
                passwordQuestion = (string) passwordQuestionParam.Value;

            if (IsSqlParameterNull(passwordAnswerParam))
                passwordAnswer = default(string);
            else
                passwordAnswer = (string) passwordAnswerParam.Value;

            if (IsSqlParameterNull(isApprovedParam))
                isApproved = null;
            else
                isApproved = (bool) isApprovedParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            if (IsSqlParameterNull(createDateParam))
                createDate = null;
            else
                createDate = (DateTime) createDateParam.Value;

            if (IsSqlParameterNull(uniqueEmailParam))
                uniqueEmail = null;
            else
                uniqueEmail = (int) uniqueEmailParam.Value;

            if (IsSqlParameterNull(passwordFormatParam))
                passwordFormat = null;
            else
                passwordFormat = (int) passwordFormatParam.Value;

            if (IsSqlParameterNull(userIdParam))
                userId = null;
            else
                userId = (Guid) userIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByEmail(out string applicationName, out string emailToMatch, out int? pageIndex, out int? pageSize)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var emailToMatchParam = new SqlParameter { ParameterName = "@EmailToMatch", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_FindUsersByEmail] @ApplicationName OUTPUT, @EmailToMatch OUTPUT, @PageIndex OUTPUT, @PageSize OUTPUT", applicationNameParam, emailToMatchParam, pageIndexParam, pageSizeParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(emailToMatchParam))
                emailToMatch = default(string);
            else
                emailToMatch = (string) emailToMatchParam.Value;

            if (IsSqlParameterNull(pageIndexParam))
                pageIndex = null;
            else
                pageIndex = (int) pageIndexParam.Value;

            if (IsSqlParameterNull(pageSizeParam))
                pageSize = null;
            else
                pageSize = (int) pageSizeParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipFindUsersByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByName(out string applicationName, out string userNameToMatch, out int? pageIndex, out int? pageSize)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameToMatchParam = new SqlParameter { ParameterName = "@UserNameToMatch", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_FindUsersByName] @ApplicationName OUTPUT, @UserNameToMatch OUTPUT, @PageIndex OUTPUT, @PageSize OUTPUT", applicationNameParam, userNameToMatchParam, pageIndexParam, pageSizeParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameToMatchParam))
                userNameToMatch = default(string);
            else
                userNameToMatch = (string) userNameToMatchParam.Value;

            if (IsSqlParameterNull(pageIndexParam))
                pageIndex = null;
            else
                pageIndex = (int) pageIndexParam.Value;

            if (IsSqlParameterNull(pageSizeParam))
                pageSize = null;
            else
                pageSize = (int) pageSizeParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipFindUsersByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetAllUsers(out string applicationName, out int? pageIndex, out int? pageSize)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_GetAllUsers] @ApplicationName OUTPUT, @PageIndex OUTPUT, @PageSize OUTPUT", applicationNameParam, pageIndexParam, pageSizeParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(pageIndexParam))
                pageIndex = null;
            else
                pageIndex = (int) pageIndexParam.Value;

            if (IsSqlParameterNull(pageSizeParam))
                pageSize = null;
            else
                pageSize = (int) pageSizeParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipGetAllUsersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetNumberOfUsersOnline(out string applicationName, out int? minutesSinceLastInActive, out DateTime? currentTimeUtc)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var minutesSinceLastInActiveParam = new SqlParameter { ParameterName = "@MinutesSinceLastInActive", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_GetNumberOfUsersOnline] @ApplicationName OUTPUT, @MinutesSinceLastInActive OUTPUT, @CurrentTimeUtc OUTPUT", applicationNameParam, minutesSinceLastInActiveParam, currentTimeUtcParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(minutesSinceLastInActiveParam))
                minutesSinceLastInActive = null;
            else
                minutesSinceLastInActive = (int) minutesSinceLastInActiveParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipGetNumberOfUsersOnlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(out string applicationName, out string userName, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out DateTime? currentTimeUtc, out string passwordAnswer)
        {
            int procResult;
            return AspnetMembershipGetPassword(out applicationName, out userName, out maxInvalidPasswordAttempts, out passwordAttemptWindow, out currentTimeUtc, out passwordAnswer, out procResult);
        }

        public List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(out string applicationName, out string userName, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out DateTime? currentTimeUtc, out string passwordAnswer, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var maxInvalidPasswordAttemptsParam = new SqlParameter { ParameterName = "@MaxInvalidPasswordAttempts", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var passwordAttemptWindowParam = new SqlParameter { ParameterName = "@PasswordAttemptWindow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var passwordAnswerParam = new SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetMembershipGetPasswordReturnModel>("EXEC @procResult = [dbo].[aspnet_Membership_GetPassword] @ApplicationName OUTPUT, @UserName OUTPUT, @MaxInvalidPasswordAttempts OUTPUT, @PasswordAttemptWindow OUTPUT, @CurrentTimeUtc OUTPUT, @PasswordAnswer OUTPUT", applicationNameParam, userNameParam, maxInvalidPasswordAttemptsParam, passwordAttemptWindowParam, currentTimeUtcParam, passwordAnswerParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(maxInvalidPasswordAttemptsParam))
                maxInvalidPasswordAttempts = null;
            else
                maxInvalidPasswordAttempts = (int) maxInvalidPasswordAttemptsParam.Value;

            if (IsSqlParameterNull(passwordAttemptWindowParam))
                passwordAttemptWindow = null;
            else
                passwordAttemptWindow = (int) passwordAttemptWindowParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            if (IsSqlParameterNull(passwordAnswerParam))
                passwordAnswer = default(string);
            else
                passwordAnswer = (string) passwordAnswerParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetMembershipGetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetMembershipGetPasswordReturnModel>)

        public List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(out string applicationName, out string userName, out bool? updateLastLoginActivityDate, out DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetMembershipGetPasswordWithFormat(out applicationName, out userName, out updateLastLoginActivityDate, out currentTimeUtc, out procResult);
        }

        public List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(out string applicationName, out string userName, out bool? updateLastLoginActivityDate, out DateTime? currentTimeUtc, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var updateLastLoginActivityDateParam = new SqlParameter { ParameterName = "@UpdateLastLoginActivityDate", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetMembershipGetPasswordWithFormatReturnModel>("EXEC @procResult = [dbo].[aspnet_Membership_GetPasswordWithFormat] @ApplicationName OUTPUT, @UserName OUTPUT, @UpdateLastLoginActivityDate OUTPUT, @CurrentTimeUtc OUTPUT", applicationNameParam, userNameParam, updateLastLoginActivityDateParam, currentTimeUtcParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(updateLastLoginActivityDateParam))
                updateLastLoginActivityDate = null;
            else
                updateLastLoginActivityDate = (bool) updateLastLoginActivityDateParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetMembershipGetPasswordWithFormatAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetMembershipGetPasswordWithFormatReturnModel>)

        public AspnetMembershipGetUserByEmailReturnModel AspnetMembershipGetUserByEmail(out string applicationName, out string email)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var emailParam = new SqlParameter { ParameterName = "@Email", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultData = new AspnetMembershipGetUserByEmailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Membership_GetUserByEmail]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(emailParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetMembershipGetUserByEmailReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetMembershipGetUserByEmailReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(emailParam))
                email = default(string);
            else
                email = (string) emailParam.Value;

            return procResultData;
        }

        // AspnetMembershipGetUserByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetMembershipGetUserByEmailReturnModel)

        public AspnetMembershipGetUserByNameReturnModel AspnetMembershipGetUserByName(out string applicationName, out string userName, out DateTime? currentTimeUtc, out bool? updateLastActivity)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var updateLastActivityParam = new SqlParameter { ParameterName = "@UpdateLastActivity", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultData = new AspnetMembershipGetUserByNameReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Membership_GetUserByName]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(userNameParam);
            cmd.Parameters.Add(currentTimeUtcParam);
            cmd.Parameters.Add(updateLastActivityParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetMembershipGetUserByNameReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetMembershipGetUserByNameReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            if (IsSqlParameterNull(updateLastActivityParam))
                updateLastActivity = null;
            else
                updateLastActivity = (bool) updateLastActivityParam.Value;

            return procResultData;
        }

        // AspnetMembershipGetUserByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetMembershipGetUserByNameReturnModel)

        public List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(out Guid? userId, out DateTime? currentTimeUtc, out bool? updateLastActivity)
        {
            int procResult;
            return AspnetMembershipGetUserByUserId(out userId, out currentTimeUtc, out updateLastActivity, out procResult);
        }

        public List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(out Guid? userId, out DateTime? currentTimeUtc, out bool? updateLastActivity, out int procResult)
        {
            var userIdParam = new SqlParameter { ParameterName = "@UserId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var updateLastActivityParam = new SqlParameter { ParameterName = "@UpdateLastActivity", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetMembershipGetUserByUserIdReturnModel>("EXEC @procResult = [dbo].[aspnet_Membership_GetUserByUserId] @UserId OUTPUT, @CurrentTimeUtc OUTPUT, @UpdateLastActivity OUTPUT", userIdParam, currentTimeUtcParam, updateLastActivityParam, procResultParam).ToList();
            if (IsSqlParameterNull(userIdParam))
                userId = null;
            else
                userId = (Guid) userIdParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            if (IsSqlParameterNull(updateLastActivityParam))
                updateLastActivity = null;
            else
                updateLastActivity = (bool) updateLastActivityParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetMembershipGetUserByUserIdAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetMembershipGetUserByUserIdReturnModel>)

        public int AspnetMembershipResetPassword(out string applicationName, out string userName, out string newPassword, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out string passwordSalt, out DateTime? currentTimeUtc, out int? passwordFormat, out string passwordAnswer)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var newPasswordParam = new SqlParameter { ParameterName = "@NewPassword", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var maxInvalidPasswordAttemptsParam = new SqlParameter { ParameterName = "@MaxInvalidPasswordAttempts", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var passwordAttemptWindowParam = new SqlParameter { ParameterName = "@PasswordAttemptWindow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var passwordSaltParam = new SqlParameter { ParameterName = "@PasswordSalt", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var passwordFormatParam = new SqlParameter { ParameterName = "@PasswordFormat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var passwordAnswerParam = new SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_ResetPassword] @ApplicationName OUTPUT, @UserName OUTPUT, @NewPassword OUTPUT, @MaxInvalidPasswordAttempts OUTPUT, @PasswordAttemptWindow OUTPUT, @PasswordSalt OUTPUT, @CurrentTimeUtc OUTPUT, @PasswordFormat OUTPUT, @PasswordAnswer OUTPUT", applicationNameParam, userNameParam, newPasswordParam, maxInvalidPasswordAttemptsParam, passwordAttemptWindowParam, passwordSaltParam, currentTimeUtcParam, passwordFormatParam, passwordAnswerParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(newPasswordParam))
                newPassword = default(string);
            else
                newPassword = (string) newPasswordParam.Value;

            if (IsSqlParameterNull(maxInvalidPasswordAttemptsParam))
                maxInvalidPasswordAttempts = null;
            else
                maxInvalidPasswordAttempts = (int) maxInvalidPasswordAttemptsParam.Value;

            if (IsSqlParameterNull(passwordAttemptWindowParam))
                passwordAttemptWindow = null;
            else
                passwordAttemptWindow = (int) passwordAttemptWindowParam.Value;

            if (IsSqlParameterNull(passwordSaltParam))
                passwordSalt = default(string);
            else
                passwordSalt = (string) passwordSaltParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            if (IsSqlParameterNull(passwordFormatParam))
                passwordFormat = null;
            else
                passwordFormat = (int) passwordFormatParam.Value;

            if (IsSqlParameterNull(passwordAnswerParam))
                passwordAnswer = default(string);
            else
                passwordAnswer = (string) passwordAnswerParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipResetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipSetPassword(out string applicationName, out string userName, out string newPassword, out string passwordSalt, out DateTime? currentTimeUtc, out int? passwordFormat)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var newPasswordParam = new SqlParameter { ParameterName = "@NewPassword", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var passwordSaltParam = new SqlParameter { ParameterName = "@PasswordSalt", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var passwordFormatParam = new SqlParameter { ParameterName = "@PasswordFormat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_SetPassword] @ApplicationName OUTPUT, @UserName OUTPUT, @NewPassword OUTPUT, @PasswordSalt OUTPUT, @CurrentTimeUtc OUTPUT, @PasswordFormat OUTPUT", applicationNameParam, userNameParam, newPasswordParam, passwordSaltParam, currentTimeUtcParam, passwordFormatParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(newPasswordParam))
                newPassword = default(string);
            else
                newPassword = (string) newPasswordParam.Value;

            if (IsSqlParameterNull(passwordSaltParam))
                passwordSalt = default(string);
            else
                passwordSalt = (string) passwordSaltParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            if (IsSqlParameterNull(passwordFormatParam))
                passwordFormat = null;
            else
                passwordFormat = (int) passwordFormatParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipSetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipUnlockUser(out string applicationName, out string userName)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_UnlockUser] @ApplicationName OUTPUT, @UserName OUTPUT", applicationNameParam, userNameParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipUnlockUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipUpdateUser(out string applicationName, out string userName, out string email, out string comment, out bool? isApproved, out DateTime? lastLoginDate, out DateTime? lastActivityDate, out int? uniqueEmail, out DateTime? currentTimeUtc)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var emailParam = new SqlParameter { ParameterName = "@Email", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var commentParam = new SqlParameter { ParameterName = "@Comment", SqlDbType = SqlDbType.NText, Direction = ParameterDirection.Output, Size = 1073741823 };
            var isApprovedParam = new SqlParameter { ParameterName = "@IsApproved", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var lastLoginDateParam = new SqlParameter { ParameterName = "@LastLoginDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var lastActivityDateParam = new SqlParameter { ParameterName = "@LastActivityDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var uniqueEmailParam = new SqlParameter { ParameterName = "@UniqueEmail", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_UpdateUser] @ApplicationName OUTPUT, @UserName OUTPUT, @Email OUTPUT, @Comment OUTPUT, @IsApproved OUTPUT, @LastLoginDate OUTPUT, @LastActivityDate OUTPUT, @UniqueEmail OUTPUT, @CurrentTimeUtc OUTPUT", applicationNameParam, userNameParam, emailParam, commentParam, isApprovedParam, lastLoginDateParam, lastActivityDateParam, uniqueEmailParam, currentTimeUtcParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(emailParam))
                email = default(string);
            else
                email = (string) emailParam.Value;

            if (IsSqlParameterNull(commentParam))
                comment = default(string);
            else
                comment = (string) commentParam.Value;

            if (IsSqlParameterNull(isApprovedParam))
                isApproved = null;
            else
                isApproved = (bool) isApprovedParam.Value;

            if (IsSqlParameterNull(lastLoginDateParam))
                lastLoginDate = null;
            else
                lastLoginDate = (DateTime) lastLoginDateParam.Value;

            if (IsSqlParameterNull(lastActivityDateParam))
                lastActivityDate = null;
            else
                lastActivityDate = (DateTime) lastActivityDateParam.Value;

            if (IsSqlParameterNull(uniqueEmailParam))
                uniqueEmail = null;
            else
                uniqueEmail = (int) uniqueEmailParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipUpdateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipUpdateUserInfo(out string applicationName, out string userName, out bool? isPasswordCorrect, out bool? updateLastLoginActivityDate, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out DateTime? currentTimeUtc, out DateTime? lastLoginDate, out DateTime? lastActivityDate)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var isPasswordCorrectParam = new SqlParameter { ParameterName = "@IsPasswordCorrect", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var updateLastLoginActivityDateParam = new SqlParameter { ParameterName = "@UpdateLastLoginActivityDate", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var maxInvalidPasswordAttemptsParam = new SqlParameter { ParameterName = "@MaxInvalidPasswordAttempts", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var passwordAttemptWindowParam = new SqlParameter { ParameterName = "@PasswordAttemptWindow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var lastLoginDateParam = new SqlParameter { ParameterName = "@LastLoginDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var lastActivityDateParam = new SqlParameter { ParameterName = "@LastActivityDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_UpdateUserInfo] @ApplicationName OUTPUT, @UserName OUTPUT, @IsPasswordCorrect OUTPUT, @UpdateLastLoginActivityDate OUTPUT, @MaxInvalidPasswordAttempts OUTPUT, @PasswordAttemptWindow OUTPUT, @CurrentTimeUtc OUTPUT, @LastLoginDate OUTPUT, @LastActivityDate OUTPUT", applicationNameParam, userNameParam, isPasswordCorrectParam, updateLastLoginActivityDateParam, maxInvalidPasswordAttemptsParam, passwordAttemptWindowParam, currentTimeUtcParam, lastLoginDateParam, lastActivityDateParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(isPasswordCorrectParam))
                isPasswordCorrect = null;
            else
                isPasswordCorrect = (bool) isPasswordCorrectParam.Value;

            if (IsSqlParameterNull(updateLastLoginActivityDateParam))
                updateLastLoginActivityDate = null;
            else
                updateLastLoginActivityDate = (bool) updateLastLoginActivityDateParam.Value;

            if (IsSqlParameterNull(maxInvalidPasswordAttemptsParam))
                maxInvalidPasswordAttempts = null;
            else
                maxInvalidPasswordAttempts = (int) maxInvalidPasswordAttemptsParam.Value;

            if (IsSqlParameterNull(passwordAttemptWindowParam))
                passwordAttemptWindow = null;
            else
                passwordAttemptWindow = (int) passwordAttemptWindowParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            if (IsSqlParameterNull(lastLoginDateParam))
                lastLoginDate = null;
            else
                lastLoginDate = (DateTime) lastLoginDateParam.Value;

            if (IsSqlParameterNull(lastActivityDateParam))
                lastActivityDate = null;
            else
                lastActivityDate = (DateTime) lastActivityDateParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipUpdateUserInfoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPathsCreatePath(out Guid? applicationId, out string path, out Guid? pathId)
        {
            var applicationIdParam = new SqlParameter { ParameterName = "@ApplicationId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathIdParam = new SqlParameter { ParameterName = "@PathId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Paths_CreatePath] @ApplicationId OUTPUT, @Path OUTPUT, @PathId OUTPUT", applicationIdParam, pathParam, pathIdParam, procResultParam);

            if (IsSqlParameterNull(applicationIdParam))
                applicationId = null;
            else
                applicationId = (Guid) applicationIdParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            if (IsSqlParameterNull(pathIdParam))
                pathId = null;
            else
                pathId = (Guid) pathIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPathsCreatePathAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationDeleteAllState(out bool? allUsersScope, out string applicationName, out int? count)
        {
            var allUsersScopeParam = new SqlParameter { ParameterName = "@AllUsersScope", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var countParam = new SqlParameter { ParameterName = "@Count", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_DeleteAllState] @AllUsersScope OUTPUT, @ApplicationName OUTPUT, @Count OUTPUT", allUsersScopeParam, applicationNameParam, countParam, procResultParam);

            if (IsSqlParameterNull(allUsersScopeParam))
                allUsersScope = null;
            else
                allUsersScope = (bool) allUsersScopeParam.Value;

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationAdministrationDeleteAllStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationFindState(out bool? allUsersScope, out string applicationName, out int? pageIndex, out int? pageSize, out string path, out string userName, out DateTime? inactiveSinceDate)
        {
            var allUsersScopeParam = new SqlParameter { ParameterName = "@AllUsersScope", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var inactiveSinceDateParam = new SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_FindState] @AllUsersScope OUTPUT, @ApplicationName OUTPUT, @PageIndex OUTPUT, @PageSize OUTPUT, @Path OUTPUT, @UserName OUTPUT, @InactiveSinceDate OUTPUT", allUsersScopeParam, applicationNameParam, pageIndexParam, pageSizeParam, pathParam, userNameParam, inactiveSinceDateParam, procResultParam);

            if (IsSqlParameterNull(allUsersScopeParam))
                allUsersScope = null;
            else
                allUsersScope = (bool) allUsersScopeParam.Value;

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(pageIndexParam))
                pageIndex = null;
            else
                pageIndex = (int) pageIndexParam.Value;

            if (IsSqlParameterNull(pageSizeParam))
                pageSize = null;
            else
                pageSize = (int) pageSizeParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(inactiveSinceDateParam))
                inactiveSinceDate = null;
            else
                inactiveSinceDate = (DateTime) inactiveSinceDateParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationAdministrationFindStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationGetCountOfState(out int? count, out bool? allUsersScope, out string applicationName, out string path, out string userName, out DateTime? inactiveSinceDate)
        {
            var countParam = new SqlParameter { ParameterName = "@Count", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var allUsersScopeParam = new SqlParameter { ParameterName = "@AllUsersScope", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var inactiveSinceDateParam = new SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_GetCountOfState] @Count OUTPUT, @AllUsersScope OUTPUT, @ApplicationName OUTPUT, @Path OUTPUT, @UserName OUTPUT, @InactiveSinceDate OUTPUT", countParam, allUsersScopeParam, applicationNameParam, pathParam, userNameParam, inactiveSinceDateParam, procResultParam);

            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            if (IsSqlParameterNull(allUsersScopeParam))
                allUsersScope = null;
            else
                allUsersScope = (bool) allUsersScopeParam.Value;

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(inactiveSinceDateParam))
                inactiveSinceDate = null;
            else
                inactiveSinceDate = (DateTime) inactiveSinceDateParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationAdministrationGetCountOfStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationResetSharedState(out int? count, out string applicationName, out string path)
        {
            var countParam = new SqlParameter { ParameterName = "@Count", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_ResetSharedState] @Count OUTPUT, @ApplicationName OUTPUT, @Path OUTPUT", countParam, applicationNameParam, pathParam, procResultParam);

            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationAdministrationResetSharedStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationResetUserState(out int? count, out string applicationName, out DateTime? inactiveSinceDate, out string userName, out string path)
        {
            var countParam = new SqlParameter { ParameterName = "@Count", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var inactiveSinceDateParam = new SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_ResetUserState] @Count OUTPUT, @ApplicationName OUTPUT, @InactiveSinceDate OUTPUT, @UserName OUTPUT, @Path OUTPUT", countParam, applicationNameParam, inactiveSinceDateParam, userNameParam, pathParam, procResultParam);

            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(inactiveSinceDateParam))
                inactiveSinceDate = null;
            else
                inactiveSinceDate = (DateTime) inactiveSinceDateParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationAdministrationResetUserStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(out string applicationName, out string path)
        {
            int procResult;
            return AspnetPersonalizationAllUsersGetPageSettings(out applicationName, out path, out procResult);
        }

        public List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(out string applicationName, out string path, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>("EXEC @procResult = [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings] @ApplicationName OUTPUT, @Path OUTPUT", applicationNameParam, pathParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetPersonalizationAllUsersGetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>)

        public int AspnetPersonalizationAllUsersResetPageSettings(out string applicationName, out string path)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings] @ApplicationName OUTPUT, @Path OUTPUT", applicationNameParam, pathParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationAllUsersResetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAllUsersSetPageSettings(out string applicationName, out string path, out byte[] pageSettings, out DateTime? currentTimeUtc)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pageSettingsParam = new SqlParameter { ParameterName = "@PageSettings", SqlDbType = SqlDbType.Image, Direction = ParameterDirection.Output, Size = 2147483647 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings] @ApplicationName OUTPUT, @Path OUTPUT, @PageSettings OUTPUT, @CurrentTimeUtc OUTPUT", applicationNameParam, pathParam, pageSettingsParam, currentTimeUtcParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            if (IsSqlParameterNull(pageSettingsParam))
                pageSettings = default(byte[]);
            else
                pageSettings = (byte[]) pageSettingsParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationAllUsersSetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationGetApplicationId(out string applicationName, out Guid? applicationId)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var applicationIdParam = new SqlParameter { ParameterName = "@ApplicationId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Personalization_GetApplicationId] @ApplicationName OUTPUT, @ApplicationId OUTPUT", applicationNameParam, applicationIdParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(applicationIdParam))
                applicationId = null;
            else
                applicationId = (Guid) applicationIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationGetApplicationIdAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(out string applicationName, out string userName, out string path, out DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetPersonalizationPerUserGetPageSettings(out applicationName, out userName, out path, out currentTimeUtc, out procResult);
        }

        public List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(out string applicationName, out string userName, out string path, out DateTime? currentTimeUtc, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetPersonalizationPerUserGetPageSettingsReturnModel>("EXEC @procResult = [dbo].[aspnet_PersonalizationPerUser_GetPageSettings] @ApplicationName OUTPUT, @UserName OUTPUT, @Path OUTPUT, @CurrentTimeUtc OUTPUT", applicationNameParam, userNameParam, pathParam, currentTimeUtcParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetPersonalizationPerUserGetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetPersonalizationPerUserGetPageSettingsReturnModel>)

        public int AspnetPersonalizationPerUserResetPageSettings(out string applicationName, out string userName, out string path, out DateTime? currentTimeUtc)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings] @ApplicationName OUTPUT, @UserName OUTPUT, @Path OUTPUT, @CurrentTimeUtc OUTPUT", applicationNameParam, userNameParam, pathParam, currentTimeUtcParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationPerUserResetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationPerUserSetPageSettings(out string applicationName, out string userName, out string path, out byte[] pageSettings, out DateTime? currentTimeUtc)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pathParam = new SqlParameter { ParameterName = "@Path", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var pageSettingsParam = new SqlParameter { ParameterName = "@PageSettings", SqlDbType = SqlDbType.Image, Direction = ParameterDirection.Output, Size = 2147483647 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationPerUser_SetPageSettings] @ApplicationName OUTPUT, @UserName OUTPUT, @Path OUTPUT, @PageSettings OUTPUT, @CurrentTimeUtc OUTPUT", applicationNameParam, userNameParam, pathParam, pageSettingsParam, currentTimeUtcParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(pathParam))
                path = default(string);
            else
                path = (string) pathParam.Value;

            if (IsSqlParameterNull(pageSettingsParam))
                pageSettings = default(byte[]);
            else
                pageSettings = (byte[]) pageSettingsParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetPersonalizationPerUserSetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public AspnetProfileDeleteInactiveProfilesReturnModel AspnetProfileDeleteInactiveProfiles(out string applicationName, out int? profileAuthOptions, out DateTime? inactiveSinceDate)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var profileAuthOptionsParam = new SqlParameter { ParameterName = "@ProfileAuthOptions", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var inactiveSinceDateParam = new SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultData = new AspnetProfileDeleteInactiveProfilesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Profile_DeleteInactiveProfiles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(profileAuthOptionsParam);
            cmd.Parameters.Add(inactiveSinceDateParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetProfileDeleteInactiveProfilesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetProfileDeleteInactiveProfilesReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(profileAuthOptionsParam))
                profileAuthOptions = null;
            else
                profileAuthOptions = (int) profileAuthOptionsParam.Value;

            if (IsSqlParameterNull(inactiveSinceDateParam))
                inactiveSinceDate = null;
            else
                inactiveSinceDate = (DateTime) inactiveSinceDateParam.Value;

            return procResultData;
        }

        // AspnetProfileDeleteInactiveProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetProfileDeleteInactiveProfilesReturnModel)

        public List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(out string applicationName, out string userNames)
        {
            int procResult;
            return AspnetProfileDeleteProfiles(out applicationName, out userNames, out procResult);
        }

        public List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(out string applicationName, out string userNames, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNamesParam = new SqlParameter { ParameterName = "@UserNames", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 4000 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetProfileDeleteProfilesReturnModel>("EXEC @procResult = [dbo].[aspnet_Profile_DeleteProfiles] @ApplicationName OUTPUT, @UserNames OUTPUT", applicationNameParam, userNamesParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNamesParam))
                userNames = default(string);
            else
                userNames = (string) userNamesParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetProfileDeleteProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetProfileDeleteProfilesReturnModel>)

        public AspnetProfileGetNumberOfInactiveProfilesReturnModel AspnetProfileGetNumberOfInactiveProfiles(out string applicationName, out int? profileAuthOptions, out DateTime? inactiveSinceDate)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var profileAuthOptionsParam = new SqlParameter { ParameterName = "@ProfileAuthOptions", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var inactiveSinceDateParam = new SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultData = new AspnetProfileGetNumberOfInactiveProfilesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(profileAuthOptionsParam);
            cmd.Parameters.Add(inactiveSinceDateParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetProfileGetNumberOfInactiveProfilesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetProfileGetNumberOfInactiveProfilesReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(profileAuthOptionsParam))
                profileAuthOptions = null;
            else
                profileAuthOptions = (int) profileAuthOptionsParam.Value;

            if (IsSqlParameterNull(inactiveSinceDateParam))
                inactiveSinceDate = null;
            else
                inactiveSinceDate = (DateTime) inactiveSinceDateParam.Value;

            return procResultData;
        }

        // AspnetProfileGetNumberOfInactiveProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetProfileGetNumberOfInactiveProfilesReturnModel)

        public int AspnetProfileGetProfiles(out string applicationName, out int? profileAuthOptions, out int? pageIndex, out int? pageSize, out string userNameToMatch, out DateTime? inactiveSinceDate)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var profileAuthOptionsParam = new SqlParameter { ParameterName = "@ProfileAuthOptions", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var userNameToMatchParam = new SqlParameter { ParameterName = "@UserNameToMatch", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var inactiveSinceDateParam = new SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Profile_GetProfiles] @ApplicationName OUTPUT, @ProfileAuthOptions OUTPUT, @PageIndex OUTPUT, @PageSize OUTPUT, @UserNameToMatch OUTPUT, @InactiveSinceDate OUTPUT", applicationNameParam, profileAuthOptionsParam, pageIndexParam, pageSizeParam, userNameToMatchParam, inactiveSinceDateParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(profileAuthOptionsParam))
                profileAuthOptions = null;
            else
                profileAuthOptions = (int) profileAuthOptionsParam.Value;

            if (IsSqlParameterNull(pageIndexParam))
                pageIndex = null;
            else
                pageIndex = (int) pageIndexParam.Value;

            if (IsSqlParameterNull(pageSizeParam))
                pageSize = null;
            else
                pageSize = (int) pageSizeParam.Value;

            if (IsSqlParameterNull(userNameToMatchParam))
                userNameToMatch = default(string);
            else
                userNameToMatch = (string) userNameToMatchParam.Value;

            if (IsSqlParameterNull(inactiveSinceDateParam))
                inactiveSinceDate = null;
            else
                inactiveSinceDate = (DateTime) inactiveSinceDateParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetProfileGetProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(out string applicationName, out string userName, out DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetProfileGetProperties(out applicationName, out userName, out currentTimeUtc, out procResult);
        }

        public List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(out string applicationName, out string userName, out DateTime? currentTimeUtc, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetProfileGetPropertiesReturnModel>("EXEC @procResult = [dbo].[aspnet_Profile_GetProperties] @ApplicationName OUTPUT, @UserName OUTPUT, @CurrentTimeUtc OUTPUT", applicationNameParam, userNameParam, currentTimeUtcParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetProfileGetPropertiesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetProfileGetPropertiesReturnModel>)

        public int AspnetProfileSetProperties(out string applicationName, out string propertyNames, out string propertyValuesString, out byte[] propertyValuesBinary, out string userName, out bool? isUserAnonymous, out DateTime? currentTimeUtc)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var propertyNamesParam = new SqlParameter { ParameterName = "@PropertyNames", SqlDbType = SqlDbType.NText, Direction = ParameterDirection.Output, Size = 1073741823 };
            var propertyValuesStringParam = new SqlParameter { ParameterName = "@PropertyValuesString", SqlDbType = SqlDbType.NText, Direction = ParameterDirection.Output, Size = 1073741823 };
            var propertyValuesBinaryParam = new SqlParameter { ParameterName = "@PropertyValuesBinary", SqlDbType = SqlDbType.Image, Direction = ParameterDirection.Output, Size = 2147483647 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var isUserAnonymousParam = new SqlParameter { ParameterName = "@IsUserAnonymous", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Profile_SetProperties] @ApplicationName OUTPUT, @PropertyNames OUTPUT, @PropertyValuesString OUTPUT, @PropertyValuesBinary OUTPUT, @UserName OUTPUT, @IsUserAnonymous OUTPUT, @CurrentTimeUtc OUTPUT", applicationNameParam, propertyNamesParam, propertyValuesStringParam, propertyValuesBinaryParam, userNameParam, isUserAnonymousParam, currentTimeUtcParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(propertyNamesParam))
                propertyNames = default(string);
            else
                propertyNames = (string) propertyNamesParam.Value;

            if (IsSqlParameterNull(propertyValuesStringParam))
                propertyValuesString = default(string);
            else
                propertyValuesString = (string) propertyValuesStringParam.Value;

            if (IsSqlParameterNull(propertyValuesBinaryParam))
                propertyValuesBinary = default(byte[]);
            else
                propertyValuesBinary = (byte[]) propertyValuesBinaryParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(isUserAnonymousParam))
                isUserAnonymous = null;
            else
                isUserAnonymous = (bool) isUserAnonymousParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetProfileSetPropertiesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetRegisterSchemaVersion(out string feature, out string compatibleSchemaVersion, out bool? isCurrentVersion, out bool? removeIncompatibleSchema)
        {
            var featureParam = new SqlParameter { ParameterName = "@Feature", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var compatibleSchemaVersionParam = new SqlParameter { ParameterName = "@CompatibleSchemaVersion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var isCurrentVersionParam = new SqlParameter { ParameterName = "@IsCurrentVersion", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var removeIncompatibleSchemaParam = new SqlParameter { ParameterName = "@RemoveIncompatibleSchema", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_RegisterSchemaVersion] @Feature OUTPUT, @CompatibleSchemaVersion OUTPUT, @IsCurrentVersion OUTPUT, @RemoveIncompatibleSchema OUTPUT", featureParam, compatibleSchemaVersionParam, isCurrentVersionParam, removeIncompatibleSchemaParam, procResultParam);

            if (IsSqlParameterNull(featureParam))
                feature = default(string);
            else
                feature = (string) featureParam.Value;

            if (IsSqlParameterNull(compatibleSchemaVersionParam))
                compatibleSchemaVersion = default(string);
            else
                compatibleSchemaVersion = (string) compatibleSchemaVersionParam.Value;

            if (IsSqlParameterNull(isCurrentVersionParam))
                isCurrentVersion = null;
            else
                isCurrentVersion = (bool) isCurrentVersionParam.Value;

            if (IsSqlParameterNull(removeIncompatibleSchemaParam))
                removeIncompatibleSchema = null;
            else
                removeIncompatibleSchema = (bool) removeIncompatibleSchemaParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetRegisterSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetRolesCreateRole(out string applicationName, out string roleName)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var roleNameParam = new SqlParameter { ParameterName = "@RoleName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Roles_CreateRole] @ApplicationName OUTPUT, @RoleName OUTPUT", applicationNameParam, roleNameParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(roleNameParam))
                roleName = default(string);
            else
                roleName = (string) roleNameParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetRolesCreateRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetRolesDeleteRole(out string applicationName, out string roleName, out bool? deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var roleNameParam = new SqlParameter { ParameterName = "@RoleName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var deleteOnlyIfRoleIsEmptyParam = new SqlParameter { ParameterName = "@DeleteOnlyIfRoleIsEmpty", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Roles_DeleteRole] @ApplicationName OUTPUT, @RoleName OUTPUT, @DeleteOnlyIfRoleIsEmpty OUTPUT", applicationNameParam, roleNameParam, deleteOnlyIfRoleIsEmptyParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(roleNameParam))
                roleName = default(string);
            else
                roleName = (string) roleNameParam.Value;

            if (IsSqlParameterNull(deleteOnlyIfRoleIsEmptyParam))
                deleteOnlyIfRoleIsEmpty = null;
            else
                deleteOnlyIfRoleIsEmpty = (bool) deleteOnlyIfRoleIsEmptyParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetRolesDeleteRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(out string applicationName)
        {
            int procResult;
            return AspnetRolesGetAllRoles(out applicationName, out procResult);
        }

        public List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(out string applicationName, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetRolesGetAllRolesReturnModel>("EXEC @procResult = [dbo].[aspnet_Roles_GetAllRoles] @ApplicationName OUTPUT", applicationNameParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetRolesGetAllRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetRolesGetAllRolesReturnModel>)

        public int AspnetRolesRoleExists(out string applicationName, out string roleName)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var roleNameParam = new SqlParameter { ParameterName = "@RoleName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Roles_RoleExists] @ApplicationName OUTPUT, @RoleName OUTPUT", applicationNameParam, roleNameParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(roleNameParam))
                roleName = default(string);
            else
                roleName = (string) roleNameParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetRolesRoleExistsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetSetupRemoveAllRoleMembers(out string name)
        {
            var nameParam = new SqlParameter { ParameterName = "@name", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Setup_RemoveAllRoleMembers] @name OUTPUT", nameParam, procResultParam);

            if (IsSqlParameterNull(nameParam))
                name = default(string);
            else
                name = (string) nameParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetSetupRemoveAllRoleMembersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetSetupRestorePermissions(out string name)
        {
            var nameParam = new SqlParameter { ParameterName = "@name", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Setup_RestorePermissions] @name OUTPUT", nameParam, procResultParam);

            if (IsSqlParameterNull(nameParam))
                name = default(string);
            else
                name = (string) nameParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetSetupRestorePermissionsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetUnRegisterSchemaVersion(out string feature, out string compatibleSchemaVersion)
        {
            var featureParam = new SqlParameter { ParameterName = "@Feature", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var compatibleSchemaVersionParam = new SqlParameter { ParameterName = "@CompatibleSchemaVersion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 128 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_UnRegisterSchemaVersion] @Feature OUTPUT, @CompatibleSchemaVersion OUTPUT", featureParam, compatibleSchemaVersionParam, procResultParam);

            if (IsSqlParameterNull(featureParam))
                feature = default(string);
            else
                feature = (string) featureParam.Value;

            if (IsSqlParameterNull(compatibleSchemaVersionParam))
                compatibleSchemaVersion = default(string);
            else
                compatibleSchemaVersion = (string) compatibleSchemaVersionParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetUnRegisterSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetUsersCreateUser(out Guid? applicationId, out string userName, out bool? isUserAnonymous, out DateTime? lastActivityDate, out Guid? userId)
        {
            var applicationIdParam = new SqlParameter { ParameterName = "@ApplicationId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var isUserAnonymousParam = new SqlParameter { ParameterName = "@IsUserAnonymous", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var lastActivityDateParam = new SqlParameter { ParameterName = "@LastActivityDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var userIdParam = new SqlParameter { ParameterName = "@UserId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Users_CreateUser] @ApplicationId OUTPUT, @UserName OUTPUT, @IsUserAnonymous OUTPUT, @LastActivityDate OUTPUT, @UserId OUTPUT", applicationIdParam, userNameParam, isUserAnonymousParam, lastActivityDateParam, userIdParam, procResultParam);

            if (IsSqlParameterNull(applicationIdParam))
                applicationId = null;
            else
                applicationId = (Guid) applicationIdParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(isUserAnonymousParam))
                isUserAnonymous = null;
            else
                isUserAnonymous = (bool) isUserAnonymousParam.Value;

            if (IsSqlParameterNull(lastActivityDateParam))
                lastActivityDate = null;
            else
                lastActivityDate = (DateTime) lastActivityDateParam.Value;

            if (IsSqlParameterNull(userIdParam))
                userId = null;
            else
                userId = (Guid) userIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetUsersCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetUsersDeleteUser(out string applicationName, out string userName, out int? tablesToDeleteFrom, out int? numTablesDeletedFrom)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var tablesToDeleteFromParam = new SqlParameter { ParameterName = "@TablesToDeleteFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var numTablesDeletedFromParam = new SqlParameter { ParameterName = "@NumTablesDeletedFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Users_DeleteUser] @ApplicationName OUTPUT, @UserName OUTPUT, @TablesToDeleteFrom OUTPUT, @NumTablesDeletedFrom OUTPUT", applicationNameParam, userNameParam, tablesToDeleteFromParam, numTablesDeletedFromParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(tablesToDeleteFromParam))
                tablesToDeleteFrom = null;
            else
                tablesToDeleteFrom = (int) tablesToDeleteFromParam.Value;

            if (IsSqlParameterNull(numTablesDeletedFromParam))
                numTablesDeletedFrom = null;
            else
                numTablesDeletedFrom = (int) numTablesDeletedFromParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetUsersDeleteUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public AspnetUsersInRolesAddUsersToRolesReturnModel AspnetUsersInRolesAddUsersToRoles(out string applicationName, out string userNames, out string roleNames, out DateTime? currentTimeUtc)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNamesParam = new SqlParameter { ParameterName = "@UserNames", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 4000 };
            var roleNamesParam = new SqlParameter { ParameterName = "@RoleNames", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 4000 };
            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var procResultData = new AspnetUsersInRolesAddUsersToRolesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_UsersInRoles_AddUsersToRoles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(userNamesParam);
            cmd.Parameters.Add(roleNamesParam);
            cmd.Parameters.Add(currentTimeUtcParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetUsersInRolesAddUsersToRolesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetUsersInRolesAddUsersToRolesReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNamesParam))
                userNames = default(string);
            else
                userNames = (string) userNamesParam.Value;

            if (IsSqlParameterNull(roleNamesParam))
                roleNames = default(string);
            else
                roleNames = (string) roleNamesParam.Value;

            if (IsSqlParameterNull(currentTimeUtcParam))
                currentTimeUtc = null;
            else
                currentTimeUtc = (DateTime) currentTimeUtcParam.Value;

            return procResultData;
        }

        // AspnetUsersInRolesAddUsersToRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetUsersInRolesAddUsersToRolesReturnModel)

        public List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(out string applicationName, out string roleName, out string userNameToMatch)
        {
            int procResult;
            return AspnetUsersInRolesFindUsersInRole(out applicationName, out roleName, out userNameToMatch, out procResult);
        }

        public List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(out string applicationName, out string roleName, out string userNameToMatch, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var roleNameParam = new SqlParameter { ParameterName = "@RoleName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameToMatchParam = new SqlParameter { ParameterName = "@UserNameToMatch", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetUsersInRolesFindUsersInRoleReturnModel>("EXEC @procResult = [dbo].[aspnet_UsersInRoles_FindUsersInRole] @ApplicationName OUTPUT, @RoleName OUTPUT, @UserNameToMatch OUTPUT", applicationNameParam, roleNameParam, userNameToMatchParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(roleNameParam))
                roleName = default(string);
            else
                roleName = (string) roleNameParam.Value;

            if (IsSqlParameterNull(userNameToMatchParam))
                userNameToMatch = default(string);
            else
                userNameToMatch = (string) userNameToMatchParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetUsersInRolesFindUsersInRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetUsersInRolesFindUsersInRoleReturnModel>)

        public List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(out string applicationName, out string userName)
        {
            int procResult;
            return AspnetUsersInRolesGetRolesForUser(out applicationName, out userName, out procResult);
        }

        public List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(out string applicationName, out string userName, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetUsersInRolesGetRolesForUserReturnModel>("EXEC @procResult = [dbo].[aspnet_UsersInRoles_GetRolesForUser] @ApplicationName OUTPUT, @UserName OUTPUT", applicationNameParam, userNameParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetUsersInRolesGetRolesForUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetUsersInRolesGetRolesForUserReturnModel>)

        public List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(out string applicationName, out string roleName)
        {
            int procResult;
            return AspnetUsersInRolesGetUsersInRoles(out applicationName, out roleName, out procResult);
        }

        public List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(out string applicationName, out string roleName, out int procResult)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var roleNameParam = new SqlParameter { ParameterName = "@RoleName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetUsersInRolesGetUsersInRolesReturnModel>("EXEC @procResult = [dbo].[aspnet_UsersInRoles_GetUsersInRoles] @ApplicationName OUTPUT, @RoleName OUTPUT", applicationNameParam, roleNameParam, procResultParam).ToList();
            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(roleNameParam))
                roleName = default(string);
            else
                roleName = (string) roleNameParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // AspnetUsersInRolesGetUsersInRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetUsersInRolesGetUsersInRolesReturnModel>)

        public int AspnetUsersInRolesIsUserInRole(out string applicationName, out string userName, out string roleName)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var roleNameParam = new SqlParameter { ParameterName = "@RoleName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_UsersInRoles_IsUserInRole] @ApplicationName OUTPUT, @UserName OUTPUT, @RoleName OUTPUT", applicationNameParam, userNameParam, roleNameParam, procResultParam);

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNameParam))
                userName = default(string);
            else
                userName = (string) userNameParam.Value;

            if (IsSqlParameterNull(roleNameParam))
                roleName = default(string);
            else
                roleName = (string) roleNameParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetUsersInRolesIsUserInRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public AspnetUsersInRolesRemoveUsersFromRolesReturnModel AspnetUsersInRolesRemoveUsersFromRoles(out string applicationName, out string userNames, out string roleNames)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var userNamesParam = new SqlParameter { ParameterName = "@UserNames", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 4000 };
            var roleNamesParam = new SqlParameter { ParameterName = "@RoleNames", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 4000 };
            var procResultData = new AspnetUsersInRolesRemoveUsersFromRolesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(userNamesParam);
            cmd.Parameters.Add(roleNamesParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetUsersInRolesRemoveUsersFromRolesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetUsersInRolesRemoveUsersFromRolesReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<AspnetUsersInRolesRemoveUsersFromRolesReturnModel.ResultSetModel3>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            if (IsSqlParameterNull(applicationNameParam))
                applicationName = default(string);
            else
                applicationName = (string) applicationNameParam.Value;

            if (IsSqlParameterNull(userNamesParam))
                userNames = default(string);
            else
                userNames = (string) userNamesParam.Value;

            if (IsSqlParameterNull(roleNamesParam))
                roleNames = default(string);
            else
                roleNames = (string) roleNamesParam.Value;

            return procResultData;
        }

        // AspnetUsersInRolesRemoveUsersFromRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetUsersInRolesRemoveUsersFromRolesReturnModel)

        public int AspnetWebEventLogEvent(out string eventId, out DateTime? eventTimeUtc, out DateTime? eventTime, out string eventType, out decimal? eventSequence, out decimal? eventOccurrence, out int? eventCode, out int? eventDetailCode, out string message, out string applicationPath, out string applicationVirtualPath, out string machineName, out string requestUrl, out string exceptionType, out string details)
        {
            var eventIdParam = new SqlParameter { ParameterName = "@EventId", SqlDbType = SqlDbType.Char, Direction = ParameterDirection.Output, Size = 32 };
            var eventTimeUtcParam = new SqlParameter { ParameterName = "@EventTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var eventTimeParam = new SqlParameter { ParameterName = "@EventTime", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Output };
            var eventTypeParam = new SqlParameter { ParameterName = "@EventType", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var eventSequenceParam = new SqlParameter { ParameterName = "@EventSequence", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 19, Scale = 0 };
            var eventOccurrenceParam = new SqlParameter { ParameterName = "@EventOccurrence", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 19, Scale = 0 };
            var eventCodeParam = new SqlParameter { ParameterName = "@EventCode", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var eventDetailCodeParam = new SqlParameter { ParameterName = "@EventDetailCode", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var messageParam = new SqlParameter { ParameterName = "@Message", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 1024 };
            var applicationPathParam = new SqlParameter { ParameterName = "@ApplicationPath", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var applicationVirtualPathParam = new SqlParameter { ParameterName = "@ApplicationVirtualPath", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var machineNameParam = new SqlParameter { ParameterName = "@MachineName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var requestUrlParam = new SqlParameter { ParameterName = "@RequestUrl", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 1024 };
            var exceptionTypeParam = new SqlParameter { ParameterName = "@ExceptionType", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 256 };
            var detailsParam = new SqlParameter { ParameterName = "@Details", SqlDbType = SqlDbType.NText, Direction = ParameterDirection.Output, Size = 1073741823 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_WebEvent_LogEvent] @EventId OUTPUT, @EventTimeUtc OUTPUT, @EventTime OUTPUT, @EventType OUTPUT, @EventSequence OUTPUT, @EventOccurrence OUTPUT, @EventCode OUTPUT, @EventDetailCode OUTPUT, @Message OUTPUT, @ApplicationPath OUTPUT, @ApplicationVirtualPath OUTPUT, @MachineName OUTPUT, @RequestUrl OUTPUT, @ExceptionType OUTPUT, @Details OUTPUT", eventIdParam, eventTimeUtcParam, eventTimeParam, eventTypeParam, eventSequenceParam, eventOccurrenceParam, eventCodeParam, eventDetailCodeParam, messageParam, applicationPathParam, applicationVirtualPathParam, machineNameParam, requestUrlParam, exceptionTypeParam, detailsParam, procResultParam);

            if (IsSqlParameterNull(eventIdParam))
                eventId = default(string);
            else
                eventId = (string) eventIdParam.Value;

            if (IsSqlParameterNull(eventTimeUtcParam))
                eventTimeUtc = null;
            else
                eventTimeUtc = (DateTime) eventTimeUtcParam.Value;

            if (IsSqlParameterNull(eventTimeParam))
                eventTime = null;
            else
                eventTime = (DateTime) eventTimeParam.Value;

            if (IsSqlParameterNull(eventTypeParam))
                eventType = default(string);
            else
                eventType = (string) eventTypeParam.Value;

            if (IsSqlParameterNull(eventSequenceParam))
                eventSequence = null;
            else
                eventSequence = (decimal) eventSequenceParam.Value;

            if (IsSqlParameterNull(eventOccurrenceParam))
                eventOccurrence = null;
            else
                eventOccurrence = (decimal) eventOccurrenceParam.Value;

            if (IsSqlParameterNull(eventCodeParam))
                eventCode = null;
            else
                eventCode = (int) eventCodeParam.Value;

            if (IsSqlParameterNull(eventDetailCodeParam))
                eventDetailCode = null;
            else
                eventDetailCode = (int) eventDetailCodeParam.Value;

            if (IsSqlParameterNull(messageParam))
                message = default(string);
            else
                message = (string) messageParam.Value;

            if (IsSqlParameterNull(applicationPathParam))
                applicationPath = default(string);
            else
                applicationPath = (string) applicationPathParam.Value;

            if (IsSqlParameterNull(applicationVirtualPathParam))
                applicationVirtualPath = default(string);
            else
                applicationVirtualPath = (string) applicationVirtualPathParam.Value;

            if (IsSqlParameterNull(machineNameParam))
                machineName = default(string);
            else
                machineName = (string) machineNameParam.Value;

            if (IsSqlParameterNull(requestUrlParam))
                requestUrl = default(string);
            else
                requestUrl = (string) requestUrlParam.Value;

            if (IsSqlParameterNull(exceptionTypeParam))
                exceptionType = default(string);
            else
                exceptionType = (string) exceptionTypeParam.Value;

            if (IsSqlParameterNull(detailsParam))
                details = default(string);
            else
                details = (string) detailsParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetWebEventLogEventAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context factory

    public class masterEntitiesFactory : IDbContextFactory<masterEntities>
    {
        public masterEntities Create()
        {
            return new masterEntities();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakemasterEntities : ImasterEntities
    {
        public DbSet<TblAdmin> TblAdmins { get; set; } // tblAdmins
        public DbSet<TblArayuz> TblArayuzs { get; set; } // tblArayuz
        public DbSet<TblBedenler> TblBedenlers { get; set; } // tblBedenler
        public DbSet<TblButikAyarlar> TblButikAyarlars { get; set; } // tblButikAyarlar
        public DbSet<TblButikKullanicilar> TblButikKullanicilars { get; set; } // tblButikKullanicilar
        public DbSet<TblCihazlar> TblCihazlars { get; set; } // tblCihazlar
        public DbSet<TblIletisim> TblIletisims { get; set; } // tblIletisim
        public DbSet<TblKategoriler> TblKategorilers { get; set; } // tblKategoriler
        public DbSet<TblPayment> TblPayments { get; set; } // tblPayment
        public DbSet<TblPaymentStatu> TblPaymentStatus { get; set; } // tblPaymentStatus
        public DbSet<TblSepet> TblSepets { get; set; } // tblSepet
        public DbSet<TblSiparisItemler> TblSiparisItemlers { get; set; } // tblSiparisItemler
        public DbSet<TblSiparisler> TblSiparislers { get; set; } // tblSiparisler
        public DbSet<TblUrunBedenleri> TblUrunBedenleris { get; set; } // tblUrunBedenleri
        public DbSet<TblUrunFoto> TblUrunFotoes { get; set; } // tblUrunFoto
        public DbSet<TblUrunTanim> TblUrunTanims { get; set; } // tblUrunTanim

        public FakemasterEntities()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            TblAdmins = new FakeDbSet<TblAdmin>("KullaniciId");
            TblArayuzs = new FakeDbSet<TblArayuz>("Id");
            TblBedenlers = new FakeDbSet<TblBedenler>("Id");
            TblButikAyarlars = new FakeDbSet<TblButikAyarlar>("Id");
            TblButikKullanicilars = new FakeDbSet<TblButikKullanicilar>("Id");
            TblCihazlars = new FakeDbSet<TblCihazlar>("Id");
            TblIletisims = new FakeDbSet<TblIletisim>("Id");
            TblKategorilers = new FakeDbSet<TblKategoriler>("Id");
            TblPayments = new FakeDbSet<TblPayment>("Id");
            TblPaymentStatus = new FakeDbSet<TblPaymentStatu>("Id");
            TblSepets = new FakeDbSet<TblSepet>("Id");
            TblSiparisItemlers = new FakeDbSet<TblSiparisItemler>("SiparisUrunId");
            TblSiparislers = new FakeDbSet<TblSiparisler>("SiparisId");
            TblUrunBedenleris = new FakeDbSet<TblUrunBedenleri>("Id");
            TblUrunFotoes = new FakeDbSet<TblUrunFoto>("FotoId");
            TblUrunTanims = new FakeDbSet<TblUrunTanim>("UrunId");

        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;

        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }

        private DbContextConfiguration _configuration;

        public DbContextConfiguration Configuration { get { return _configuration; } }

        private Database _database;

        public Database Database { get { return _database; } }

        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        // Stored Procedures

        public AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(out int? tablesToCheck)
        {
            int procResult;
            return AspnetAnyDataInTables(out tablesToCheck, out procResult);
        }

        public AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(out int? tablesToCheck, out int procResult)
        {
            tablesToCheck = default(int);
            procResult = 0;
            return new AspnetAnyDataInTablesReturnModel();
        }

        // AspnetAnyDataInTablesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetAnyDataInTablesReturnModel)


        public int AspnetApplicationsCreateApplication(out string applicationName, out Guid? applicationId)
        {
            applicationName = default(string);
            applicationId = default(Guid);
            return 0;
        }

        // AspnetApplicationsCreateApplicationAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetCheckSchemaVersion(out string feature, out string compatibleSchemaVersion)
        {
            feature = default(string);
            compatibleSchemaVersion = default(string);
            return 0;
        }

        // AspnetCheckSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipChangePasswordQuestionAndAnswer(out string applicationName, out string userName, out string newPasswordQuestion, out string newPasswordAnswer)
        {
            applicationName = default(string);
            userName = default(string);
            newPasswordQuestion = default(string);
            newPasswordAnswer = default(string);
            return 0;
        }

        // AspnetMembershipChangePasswordQuestionAndAnswerAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipCreateUser(out string applicationName, out string userName, out string password, out string passwordSalt, out string email, out string passwordQuestion, out string passwordAnswer, out bool? isApproved, out DateTime? currentTimeUtc, out DateTime? createDate, out int? uniqueEmail, out int? passwordFormat, out Guid? userId)
        {
            applicationName = default(string);
            userName = default(string);
            password = default(string);
            passwordSalt = default(string);
            email = default(string);
            passwordQuestion = default(string);
            passwordAnswer = default(string);
            isApproved = default(bool);
            currentTimeUtc = default(DateTime);
            createDate = default(DateTime);
            uniqueEmail = default(int);
            passwordFormat = default(int);
            userId = default(Guid);
            return 0;
        }

        // AspnetMembershipCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByEmail(out string applicationName, out string emailToMatch, out int? pageIndex, out int? pageSize)
        {
            applicationName = default(string);
            emailToMatch = default(string);
            pageIndex = default(int);
            pageSize = default(int);
            return 0;
        }

        // AspnetMembershipFindUsersByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByName(out string applicationName, out string userNameToMatch, out int? pageIndex, out int? pageSize)
        {
            applicationName = default(string);
            userNameToMatch = default(string);
            pageIndex = default(int);
            pageSize = default(int);
            return 0;
        }

        // AspnetMembershipFindUsersByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetAllUsers(out string applicationName, out int? pageIndex, out int? pageSize)
        {
            applicationName = default(string);
            pageIndex = default(int);
            pageSize = default(int);
            return 0;
        }

        // AspnetMembershipGetAllUsersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetNumberOfUsersOnline(out string applicationName, out int? minutesSinceLastInActive, out DateTime? currentTimeUtc)
        {
            applicationName = default(string);
            minutesSinceLastInActive = default(int);
            currentTimeUtc = default(DateTime);
            return 0;
        }

        // AspnetMembershipGetNumberOfUsersOnlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(out string applicationName, out string userName, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out DateTime? currentTimeUtc, out string passwordAnswer)
        {
            int procResult;
            return AspnetMembershipGetPassword(out applicationName, out userName, out maxInvalidPasswordAttempts, out passwordAttemptWindow, out currentTimeUtc, out passwordAnswer, out procResult);
        }

        public List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(out string applicationName, out string userName, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out DateTime? currentTimeUtc, out string passwordAnswer, out int procResult)
        {
            applicationName = default(string);
            userName = default(string);
            maxInvalidPasswordAttempts = default(int);
            passwordAttemptWindow = default(int);
            currentTimeUtc = default(DateTime);
            passwordAnswer = default(string);
            procResult = 0;
            return new List<AspnetMembershipGetPasswordReturnModel>();
        }

        // AspnetMembershipGetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetMembershipGetPasswordReturnModel>)


        public List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(out string applicationName, out string userName, out bool? updateLastLoginActivityDate, out DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetMembershipGetPasswordWithFormat(out applicationName, out userName, out updateLastLoginActivityDate, out currentTimeUtc, out procResult);
        }

        public List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(out string applicationName, out string userName, out bool? updateLastLoginActivityDate, out DateTime? currentTimeUtc, out int procResult)
        {
            applicationName = default(string);
            userName = default(string);
            updateLastLoginActivityDate = default(bool);
            currentTimeUtc = default(DateTime);
            procResult = 0;
            return new List<AspnetMembershipGetPasswordWithFormatReturnModel>();
        }

        // AspnetMembershipGetPasswordWithFormatAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetMembershipGetPasswordWithFormatReturnModel>)


        public AspnetMembershipGetUserByEmailReturnModel AspnetMembershipGetUserByEmail(out string applicationName, out string email)
        {
            int procResult;
            return AspnetMembershipGetUserByEmail(out applicationName, out email, out procResult);
        }

        public AspnetMembershipGetUserByEmailReturnModel AspnetMembershipGetUserByEmail(out string applicationName, out string email, out int procResult)
        {
            applicationName = default(string);
            email = default(string);
            procResult = 0;
            return new AspnetMembershipGetUserByEmailReturnModel();
        }

        // AspnetMembershipGetUserByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetMembershipGetUserByEmailReturnModel)


        public AspnetMembershipGetUserByNameReturnModel AspnetMembershipGetUserByName(out string applicationName, out string userName, out DateTime? currentTimeUtc, out bool? updateLastActivity)
        {
            int procResult;
            return AspnetMembershipGetUserByName(out applicationName, out userName, out currentTimeUtc, out updateLastActivity, out procResult);
        }

        public AspnetMembershipGetUserByNameReturnModel AspnetMembershipGetUserByName(out string applicationName, out string userName, out DateTime? currentTimeUtc, out bool? updateLastActivity, out int procResult)
        {
            applicationName = default(string);
            userName = default(string);
            currentTimeUtc = default(DateTime);
            updateLastActivity = default(bool);
            procResult = 0;
            return new AspnetMembershipGetUserByNameReturnModel();
        }

        // AspnetMembershipGetUserByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetMembershipGetUserByNameReturnModel)


        public List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(out Guid? userId, out DateTime? currentTimeUtc, out bool? updateLastActivity)
        {
            int procResult;
            return AspnetMembershipGetUserByUserId(out userId, out currentTimeUtc, out updateLastActivity, out procResult);
        }

        public List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(out Guid? userId, out DateTime? currentTimeUtc, out bool? updateLastActivity, out int procResult)
        {
            userId = default(Guid);
            currentTimeUtc = default(DateTime);
            updateLastActivity = default(bool);
            procResult = 0;
            return new List<AspnetMembershipGetUserByUserIdReturnModel>();
        }

        // AspnetMembershipGetUserByUserIdAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetMembershipGetUserByUserIdReturnModel>)


        public int AspnetMembershipResetPassword(out string applicationName, out string userName, out string newPassword, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out string passwordSalt, out DateTime? currentTimeUtc, out int? passwordFormat, out string passwordAnswer)
        {
            applicationName = default(string);
            userName = default(string);
            newPassword = default(string);
            maxInvalidPasswordAttempts = default(int);
            passwordAttemptWindow = default(int);
            passwordSalt = default(string);
            currentTimeUtc = default(DateTime);
            passwordFormat = default(int);
            passwordAnswer = default(string);
            return 0;
        }

        // AspnetMembershipResetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipSetPassword(out string applicationName, out string userName, out string newPassword, out string passwordSalt, out DateTime? currentTimeUtc, out int? passwordFormat)
        {
            applicationName = default(string);
            userName = default(string);
            newPassword = default(string);
            passwordSalt = default(string);
            currentTimeUtc = default(DateTime);
            passwordFormat = default(int);
            return 0;
        }

        // AspnetMembershipSetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipUnlockUser(out string applicationName, out string userName)
        {
            applicationName = default(string);
            userName = default(string);
            return 0;
        }

        // AspnetMembershipUnlockUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipUpdateUser(out string applicationName, out string userName, out string email, out string comment, out bool? isApproved, out DateTime? lastLoginDate, out DateTime? lastActivityDate, out int? uniqueEmail, out DateTime? currentTimeUtc)
        {
            applicationName = default(string);
            userName = default(string);
            email = default(string);
            comment = default(string);
            isApproved = default(bool);
            lastLoginDate = default(DateTime);
            lastActivityDate = default(DateTime);
            uniqueEmail = default(int);
            currentTimeUtc = default(DateTime);
            return 0;
        }

        // AspnetMembershipUpdateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipUpdateUserInfo(out string applicationName, out string userName, out bool? isPasswordCorrect, out bool? updateLastLoginActivityDate, out int? maxInvalidPasswordAttempts, out int? passwordAttemptWindow, out DateTime? currentTimeUtc, out DateTime? lastLoginDate, out DateTime? lastActivityDate)
        {
            applicationName = default(string);
            userName = default(string);
            isPasswordCorrect = default(bool);
            updateLastLoginActivityDate = default(bool);
            maxInvalidPasswordAttempts = default(int);
            passwordAttemptWindow = default(int);
            currentTimeUtc = default(DateTime);
            lastLoginDate = default(DateTime);
            lastActivityDate = default(DateTime);
            return 0;
        }

        // AspnetMembershipUpdateUserInfoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPathsCreatePath(out Guid? applicationId, out string path, out Guid? pathId)
        {
            applicationId = default(Guid);
            path = default(string);
            pathId = default(Guid);
            return 0;
        }

        // AspnetPathsCreatePathAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationDeleteAllState(out bool? allUsersScope, out string applicationName, out int? count)
        {
            allUsersScope = default(bool);
            applicationName = default(string);
            count = default(int);
            return 0;
        }

        // AspnetPersonalizationAdministrationDeleteAllStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationFindState(out bool? allUsersScope, out string applicationName, out int? pageIndex, out int? pageSize, out string path, out string userName, out DateTime? inactiveSinceDate)
        {
            allUsersScope = default(bool);
            applicationName = default(string);
            pageIndex = default(int);
            pageSize = default(int);
            path = default(string);
            userName = default(string);
            inactiveSinceDate = default(DateTime);
            return 0;
        }

        // AspnetPersonalizationAdministrationFindStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationGetCountOfState(out int? count, out bool? allUsersScope, out string applicationName, out string path, out string userName, out DateTime? inactiveSinceDate)
        {
            count = default(int);
            allUsersScope = default(bool);
            applicationName = default(string);
            path = default(string);
            userName = default(string);
            inactiveSinceDate = default(DateTime);
            return 0;
        }

        // AspnetPersonalizationAdministrationGetCountOfStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationResetSharedState(out int? count, out string applicationName, out string path)
        {
            count = default(int);
            applicationName = default(string);
            path = default(string);
            return 0;
        }

        // AspnetPersonalizationAdministrationResetSharedStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAdministrationResetUserState(out int? count, out string applicationName, out DateTime? inactiveSinceDate, out string userName, out string path)
        {
            count = default(int);
            applicationName = default(string);
            inactiveSinceDate = default(DateTime);
            userName = default(string);
            path = default(string);
            return 0;
        }

        // AspnetPersonalizationAdministrationResetUserStateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(out string applicationName, out string path)
        {
            int procResult;
            return AspnetPersonalizationAllUsersGetPageSettings(out applicationName, out path, out procResult);
        }

        public List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(out string applicationName, out string path, out int procResult)
        {
            applicationName = default(string);
            path = default(string);
            procResult = 0;
            return new List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>();
        }

        // AspnetPersonalizationAllUsersGetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>)


        public int AspnetPersonalizationAllUsersResetPageSettings(out string applicationName, out string path)
        {
            applicationName = default(string);
            path = default(string);
            return 0;
        }

        // AspnetPersonalizationAllUsersResetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationAllUsersSetPageSettings(out string applicationName, out string path, out byte[] pageSettings, out DateTime? currentTimeUtc)
        {
            applicationName = default(string);
            path = default(string);
            pageSettings = default(byte[]);
            currentTimeUtc = default(DateTime);
            return 0;
        }

        // AspnetPersonalizationAllUsersSetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationGetApplicationId(out string applicationName, out Guid? applicationId)
        {
            applicationName = default(string);
            applicationId = default(Guid);
            return 0;
        }

        // AspnetPersonalizationGetApplicationIdAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(out string applicationName, out string userName, out string path, out DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetPersonalizationPerUserGetPageSettings(out applicationName, out userName, out path, out currentTimeUtc, out procResult);
        }

        public List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(out string applicationName, out string userName, out string path, out DateTime? currentTimeUtc, out int procResult)
        {
            applicationName = default(string);
            userName = default(string);
            path = default(string);
            currentTimeUtc = default(DateTime);
            procResult = 0;
            return new List<AspnetPersonalizationPerUserGetPageSettingsReturnModel>();
        }

        // AspnetPersonalizationPerUserGetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetPersonalizationPerUserGetPageSettingsReturnModel>)


        public int AspnetPersonalizationPerUserResetPageSettings(out string applicationName, out string userName, out string path, out DateTime? currentTimeUtc)
        {
            applicationName = default(string);
            userName = default(string);
            path = default(string);
            currentTimeUtc = default(DateTime);
            return 0;
        }

        // AspnetPersonalizationPerUserResetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetPersonalizationPerUserSetPageSettings(out string applicationName, out string userName, out string path, out byte[] pageSettings, out DateTime? currentTimeUtc)
        {
            applicationName = default(string);
            userName = default(string);
            path = default(string);
            pageSettings = default(byte[]);
            currentTimeUtc = default(DateTime);
            return 0;
        }

        // AspnetPersonalizationPerUserSetPageSettingsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public AspnetProfileDeleteInactiveProfilesReturnModel AspnetProfileDeleteInactiveProfiles(out string applicationName, out int? profileAuthOptions, out DateTime? inactiveSinceDate)
        {
            int procResult;
            return AspnetProfileDeleteInactiveProfiles(out applicationName, out profileAuthOptions, out inactiveSinceDate, out procResult);
        }

        public AspnetProfileDeleteInactiveProfilesReturnModel AspnetProfileDeleteInactiveProfiles(out string applicationName, out int? profileAuthOptions, out DateTime? inactiveSinceDate, out int procResult)
        {
            applicationName = default(string);
            profileAuthOptions = default(int);
            inactiveSinceDate = default(DateTime);
            procResult = 0;
            return new AspnetProfileDeleteInactiveProfilesReturnModel();
        }

        // AspnetProfileDeleteInactiveProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetProfileDeleteInactiveProfilesReturnModel)


        public List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(out string applicationName, out string userNames)
        {
            int procResult;
            return AspnetProfileDeleteProfiles(out applicationName, out userNames, out procResult);
        }

        public List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(out string applicationName, out string userNames, out int procResult)
        {
            applicationName = default(string);
            userNames = default(string);
            procResult = 0;
            return new List<AspnetProfileDeleteProfilesReturnModel>();
        }

        // AspnetProfileDeleteProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetProfileDeleteProfilesReturnModel>)


        public AspnetProfileGetNumberOfInactiveProfilesReturnModel AspnetProfileGetNumberOfInactiveProfiles(out string applicationName, out int? profileAuthOptions, out DateTime? inactiveSinceDate)
        {
            int procResult;
            return AspnetProfileGetNumberOfInactiveProfiles(out applicationName, out profileAuthOptions, out inactiveSinceDate, out procResult);
        }

        public AspnetProfileGetNumberOfInactiveProfilesReturnModel AspnetProfileGetNumberOfInactiveProfiles(out string applicationName, out int? profileAuthOptions, out DateTime? inactiveSinceDate, out int procResult)
        {
            applicationName = default(string);
            profileAuthOptions = default(int);
            inactiveSinceDate = default(DateTime);
            procResult = 0;
            return new AspnetProfileGetNumberOfInactiveProfilesReturnModel();
        }

        // AspnetProfileGetNumberOfInactiveProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetProfileGetNumberOfInactiveProfilesReturnModel)


        public int AspnetProfileGetProfiles(out string applicationName, out int? profileAuthOptions, out int? pageIndex, out int? pageSize, out string userNameToMatch, out DateTime? inactiveSinceDate)
        {
            applicationName = default(string);
            profileAuthOptions = default(int);
            pageIndex = default(int);
            pageSize = default(int);
            userNameToMatch = default(string);
            inactiveSinceDate = default(DateTime);
            return 0;
        }

        // AspnetProfileGetProfilesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(out string applicationName, out string userName, out DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetProfileGetProperties(out applicationName, out userName, out currentTimeUtc, out procResult);
        }

        public List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(out string applicationName, out string userName, out DateTime? currentTimeUtc, out int procResult)
        {
            applicationName = default(string);
            userName = default(string);
            currentTimeUtc = default(DateTime);
            procResult = 0;
            return new List<AspnetProfileGetPropertiesReturnModel>();
        }

        // AspnetProfileGetPropertiesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetProfileGetPropertiesReturnModel>)


        public int AspnetProfileSetProperties(out string applicationName, out string propertyNames, out string propertyValuesString, out byte[] propertyValuesBinary, out string userName, out bool? isUserAnonymous, out DateTime? currentTimeUtc)
        {
            applicationName = default(string);
            propertyNames = default(string);
            propertyValuesString = default(string);
            propertyValuesBinary = default(byte[]);
            userName = default(string);
            isUserAnonymous = default(bool);
            currentTimeUtc = default(DateTime);
            return 0;
        }

        // AspnetProfileSetPropertiesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetRegisterSchemaVersion(out string feature, out string compatibleSchemaVersion, out bool? isCurrentVersion, out bool? removeIncompatibleSchema)
        {
            feature = default(string);
            compatibleSchemaVersion = default(string);
            isCurrentVersion = default(bool);
            removeIncompatibleSchema = default(bool);
            return 0;
        }

        // AspnetRegisterSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetRolesCreateRole(out string applicationName, out string roleName)
        {
            applicationName = default(string);
            roleName = default(string);
            return 0;
        }

        // AspnetRolesCreateRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetRolesDeleteRole(out string applicationName, out string roleName, out bool? deleteOnlyIfRoleIsEmpty)
        {
            applicationName = default(string);
            roleName = default(string);
            deleteOnlyIfRoleIsEmpty = default(bool);
            return 0;
        }

        // AspnetRolesDeleteRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(out string applicationName)
        {
            int procResult;
            return AspnetRolesGetAllRoles(out applicationName, out procResult);
        }

        public List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(out string applicationName, out int procResult)
        {
            applicationName = default(string);
            procResult = 0;
            return new List<AspnetRolesGetAllRolesReturnModel>();
        }

        // AspnetRolesGetAllRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetRolesGetAllRolesReturnModel>)


        public int AspnetRolesRoleExists(out string applicationName, out string roleName)
        {
            applicationName = default(string);
            roleName = default(string);
            return 0;
        }

        // AspnetRolesRoleExistsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetSetupRemoveAllRoleMembers(out string name)
        {
            name = default(string);
            return 0;
        }

        // AspnetSetupRemoveAllRoleMembersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetSetupRestorePermissions(out string name)
        {
            name = default(string);
            return 0;
        }

        // AspnetSetupRestorePermissionsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetUnRegisterSchemaVersion(out string feature, out string compatibleSchemaVersion)
        {
            feature = default(string);
            compatibleSchemaVersion = default(string);
            return 0;
        }

        // AspnetUnRegisterSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetUsersCreateUser(out Guid? applicationId, out string userName, out bool? isUserAnonymous, out DateTime? lastActivityDate, out Guid? userId)
        {
            applicationId = default(Guid);
            userName = default(string);
            isUserAnonymous = default(bool);
            lastActivityDate = default(DateTime);
            userId = default(Guid);
            return 0;
        }

        // AspnetUsersCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetUsersDeleteUser(out string applicationName, out string userName, out int? tablesToDeleteFrom, out int? numTablesDeletedFrom)
        {
            applicationName = default(string);
            userName = default(string);
            tablesToDeleteFrom = default(int);
            numTablesDeletedFrom = default(int);
            return 0;
        }

        // AspnetUsersDeleteUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public AspnetUsersInRolesAddUsersToRolesReturnModel AspnetUsersInRolesAddUsersToRoles(out string applicationName, out string userNames, out string roleNames, out DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetUsersInRolesAddUsersToRoles(out applicationName, out userNames, out roleNames, out currentTimeUtc, out procResult);
        }

        public AspnetUsersInRolesAddUsersToRolesReturnModel AspnetUsersInRolesAddUsersToRoles(out string applicationName, out string userNames, out string roleNames, out DateTime? currentTimeUtc, out int procResult)
        {
            applicationName = default(string);
            userNames = default(string);
            roleNames = default(string);
            currentTimeUtc = default(DateTime);
            procResult = 0;
            return new AspnetUsersInRolesAddUsersToRolesReturnModel();
        }

        // AspnetUsersInRolesAddUsersToRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetUsersInRolesAddUsersToRolesReturnModel)


        public List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(out string applicationName, out string roleName, out string userNameToMatch)
        {
            int procResult;
            return AspnetUsersInRolesFindUsersInRole(out applicationName, out roleName, out userNameToMatch, out procResult);
        }

        public List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(out string applicationName, out string roleName, out string userNameToMatch, out int procResult)
        {
            applicationName = default(string);
            roleName = default(string);
            userNameToMatch = default(string);
            procResult = 0;
            return new List<AspnetUsersInRolesFindUsersInRoleReturnModel>();
        }

        // AspnetUsersInRolesFindUsersInRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetUsersInRolesFindUsersInRoleReturnModel>)


        public List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(out string applicationName, out string userName)
        {
            int procResult;
            return AspnetUsersInRolesGetRolesForUser(out applicationName, out userName, out procResult);
        }

        public List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(out string applicationName, out string userName, out int procResult)
        {
            applicationName = default(string);
            userName = default(string);
            procResult = 0;
            return new List<AspnetUsersInRolesGetRolesForUserReturnModel>();
        }

        // AspnetUsersInRolesGetRolesForUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetUsersInRolesGetRolesForUserReturnModel>)


        public List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(out string applicationName, out string roleName)
        {
            int procResult;
            return AspnetUsersInRolesGetUsersInRoles(out applicationName, out roleName, out procResult);
        }

        public List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(out string applicationName, out string roleName, out int procResult)
        {
            applicationName = default(string);
            roleName = default(string);
            procResult = 0;
            return new List<AspnetUsersInRolesGetUsersInRolesReturnModel>();
        }

        // AspnetUsersInRolesGetUsersInRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<AspnetUsersInRolesGetUsersInRolesReturnModel>)


        public int AspnetUsersInRolesIsUserInRole(out string applicationName, out string userName, out string roleName)
        {
            applicationName = default(string);
            userName = default(string);
            roleName = default(string);
            return 0;
        }

        // AspnetUsersInRolesIsUserInRoleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public AspnetUsersInRolesRemoveUsersFromRolesReturnModel AspnetUsersInRolesRemoveUsersFromRoles(out string applicationName, out string userNames, out string roleNames)
        {
            int procResult;
            return AspnetUsersInRolesRemoveUsersFromRoles(out applicationName, out userNames, out roleNames, out procResult);
        }

        public AspnetUsersInRolesRemoveUsersFromRolesReturnModel AspnetUsersInRolesRemoveUsersFromRoles(out string applicationName, out string userNames, out string roleNames, out int procResult)
        {
            applicationName = default(string);
            userNames = default(string);
            roleNames = default(string);
            procResult = 0;
            return new AspnetUsersInRolesRemoveUsersFromRolesReturnModel();
        }

        // AspnetUsersInRolesRemoveUsersFromRolesAsync() cannot be created due to having out parameters, or is relying on the procedure result (AspnetUsersInRolesRemoveUsersFromRolesReturnModel)


        public int AspnetWebEventLogEvent(out string eventId, out DateTime? eventTimeUtc, out DateTime? eventTime, out string eventType, out decimal? eventSequence, out decimal? eventOccurrence, out int? eventCode, out int? eventDetailCode, out string message, out string applicationPath, out string applicationVirtualPath, out string machineName, out string requestUrl, out string exceptionType, out string details)
        {
            eventId = default(string);
            eventTimeUtc = default(DateTime);
            eventTime = default(DateTime);
            eventType = default(string);
            eventSequence = default(decimal);
            eventOccurrence = default(decimal);
            eventCode = default(int);
            eventDetailCode = default(int);
            message = default(string);
            applicationPath = default(string);
            applicationVirtualPath = default(string);
            machineName = default(string);
            requestUrl = default(string);
            exceptionType = default(string);
            details = default(string);
            return 0;
        }

        // AspnetWebEventLogEventAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override Task<TEntity> FindAsync(params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return Activator.CreateInstance<TDerivedEntity>();
        }

        public override ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute(expression));
        }

        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute<TResult>(expression));
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        { }

        public IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }

    }

    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
        {
            return Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // tblAdmins
    public class TblAdmin
    {
        public int KullaniciId { get; set; } // kullanici_id (Primary key)
    }

    // tblArayuz
    public class TblArayuz
    {
        public int Id { get; set; } // id (Primary key)
        public string AfisBaslik { get; set; } // afis_baslik (length: 50)
        public string AfisAltbaslik { get; set; } // afis_altbaslik (length: 100)
        public string Altbilgi { get; set; } // altbilgi (length: 500)
        public string UyelikSozlesmesi { get; set; } // uyelik_sozlesmesi (length: 4000)
    }

    // tblBedenler
    public class TblBedenler
    {
        public int Id { get; set; } // Id (Primary key)
        public string Beden { get; set; } // Beden (length: 50)
    }

    // tblButikAyarlar
    public class TblButikAyarlar
    {
        public int Id { get; set; } // id (Primary key)
        public int? SiteAktif { get; set; } // site_aktif
    }

    // tblButikKullanicilar
    public class TblButikKullanicilar
    {
        public int Id { get; set; } // id (Primary key)
        public string Email { get; set; } // email (length: 320)
        public string Parola { get; set; } // parola (length: 20)
        public string Ad { get; set; } // ad (length: 50)
        public string Soyad { get; set; } // soyad (length: 50)
        public int Rol { get; set; } // rol
    }

    // tblCihazlar
    public class TblCihazlar
    {
        public int Id { get; set; } // id (Primary key)
        public int UserId { get; set; } // user_id
        public string DeviceToken { get; set; } // device_token (length: 255)
    }

    // tblIletisim
    public class TblIletisim
    {
        public int Id { get; set; } // id (Primary key)
        public string TelNo { get; set; } // tel_no (length: 50)
        public string Mail { get; set; } // mail (length: 320)
        public string Instagram { get; set; } // instagram (length: 100)
        public string Youtube { get; set; } // youtube (length: 100)
        public string Adres { get; set; } // adres (length: 50)
    }

    // tblKategoriler
    public class TblKategoriler
    {
        public int Id { get; set; } // id (Primary key)
        public string KategoriIsim { get; set; } // kategori_isim (length: 100)
    }

    // tblPayment
    public class TblPayment
    {
        public int Id { get; set; } // id (Primary key)
        public string Token { get; set; } // token
        public int PaymentId { get; set; } // payment_id
    }

    // tblPaymentStatus
    public class TblPaymentStatu
    {
        public int Id { get; set; } // id (Primary key)
        public int Success { get; set; } // success
        public int PaymentId { get; set; } // payment_id
    }

    // tblSepet
    public class TblSepet
    {
        public int Id { get; set; } // id (Primary key)
        public int UrunId { get; set; } // urun_id
        public int KullaniciId { get; set; } // kullanici_id
        public int UrunBeden { get; set; } // urun_beden
    }

    // tblSiparisItemler
    public class TblSiparisItemler
    {
        public int SiparisUrunId { get; set; } // siparis_urun_id (Primary key)
        public int SiparisId { get; set; } // siparis_id
        public int UrunId { get; set; } // urun_id
        public int UrunBeden { get; set; } // urun_beden

        // Foreign keys

        /// <summary>
        /// Parent TblSiparisler pointed by [tblSiparisItemler].([SiparisId]) (FK_tblSiparisItemler_tblSiparisler)
        /// </summary>
        public TblSiparisler TblSiparisler { get; set; } // FK_tblSiparisItemler_tblSiparisler
    }

    // tblSiparisler
    public class TblSiparisler
    {
        public int SiparisId { get; set; } // siparis_id (Primary key)
        public DateTime SiparisTarih { get; set; } // siparis_tarih
        public string SiparisAdres { get; set; } // siparis_adres (length: 4000)
        public int? SiparisKullaniciId { get; set; } // siparis_kullanici_id

        // Reverse navigation

        /// <summary>
        /// Child TblSiparisItemlers where [tblSiparisItemler].[siparis_id] point to this entity (FK_tblSiparisItemler_tblSiparisler)
        /// </summary>
        public ICollection<TblSiparisItemler> TblSiparisItemlers { get; set; } // tblSiparisItemler.FK_tblSiparisItemler_tblSiparisler

        public TblSiparisler()
        {
            TblSiparisItemlers = new List<TblSiparisItemler>();
        }
    }

    // tblUrunBedenleri
    public class TblUrunBedenleri
    {
        public int Id { get; set; } // Id (Primary key)
        public int UrunId { get; set; } // UrunId
        public int BedenId { get; set; } // BedenId

        // Foreign keys

        /// <summary>
        /// Parent TblUrunTanim pointed by [tblUrunBedenleri].([UrunId]) (FK_tblUrunBedenleri_tblUrunTanim)
        /// </summary>
        public TblUrunTanim TblUrunTanim { get; set; } // FK_tblUrunBedenleri_tblUrunTanim
    }

    // tblUrunFoto
    public class TblUrunFoto
    {
        public int FotoId { get; set; } // foto_id (Primary key)
        public int UrunId { get; set; } // urun_id
        public string UrunFoto { get; set; } // urun_foto

        // Foreign keys

        /// <summary>
        /// Parent TblUrunTanim pointed by [tblUrunFoto].([UrunId]) (FK_tblUrunFoto_tblUrunTanim)
        /// </summary>
        public TblUrunTanim TblUrunTanim { get; set; } // FK_tblUrunFoto_tblUrunTanim
    }

    // tblUrunTanim
    public class TblUrunTanim
    {
        public int UrunId { get; set; } // urun_id (Primary key)
        public string UrunIsim { get; set; } // urun_isim (length: 100)
        public decimal UrunFiyat { get; set; } // urun_fiyat
        public int UrunIndirim { get; set; } // urun_indirim
        public decimal? UrunEskiFiyat { get; set; } // urun_eski_fiyat
        public string UrunAciklama { get; set; } // urun_aciklama (length: 1000)
        public string UrunKategori { get; set; } // urun_kategori (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child TblUrunBedenleris where [tblUrunBedenleri].[UrunId] point to this entity (FK_tblUrunBedenleri_tblUrunTanim)
        /// </summary>
        public ICollection<TblUrunBedenleri> TblUrunBedenleris { get; set; } // tblUrunBedenleri.FK_tblUrunBedenleri_tblUrunTanim

        /// <summary>
        /// Child TblUrunFotoes where [tblUrunFoto].[urun_id] point to this entity (FK_tblUrunFoto_tblUrunTanim)
        /// </summary>
        public ICollection<TblUrunFoto> TblUrunFotoes { get; set; } // tblUrunFoto.FK_tblUrunFoto_tblUrunTanim

        public TblUrunTanim()
        {
            TblUrunBedenleris = new List<TblUrunBedenleri>();
            TblUrunFotoes = new List<TblUrunFoto>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // tblAdmins
    public class TblAdminConfiguration : EntityTypeConfiguration<TblAdmin>
    {
        public TblAdminConfiguration()
            : this("dbo")
        {
        }

        public TblAdminConfiguration(string schema)
        {
            ToTable("tblAdmins", schema);
            HasKey(x => x.KullaniciId);

            Property(x => x.KullaniciId).HasColumnName(@"kullanici_id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // tblArayuz
    public class TblArayuzConfiguration : EntityTypeConfiguration<TblArayuz>
    {
        public TblArayuzConfiguration()
            : this("dbo")
        {
        }

        public TblArayuzConfiguration(string schema)
        {
            ToTable("tblArayuz", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AfisBaslik).HasColumnName(@"afis_baslik").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.AfisAltbaslik).HasColumnName(@"afis_altbaslik").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Altbilgi).HasColumnName(@"altbilgi").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.UyelikSozlesmesi).HasColumnName(@"uyelik_sozlesmesi").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
        }
    }

    // tblBedenler
    public class TblBedenlerConfiguration : EntityTypeConfiguration<TblBedenler>
    {
        public TblBedenlerConfiguration()
            : this("dbo")
        {
        }

        public TblBedenlerConfiguration(string schema)
        {
            ToTable("tblBedenler", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Beden).HasColumnName(@"Beden").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
        }
    }

    // tblButikAyarlar
    public class TblButikAyarlarConfiguration : EntityTypeConfiguration<TblButikAyarlar>
    {
        public TblButikAyarlarConfiguration()
            : this("dbo")
        {
        }

        public TblButikAyarlarConfiguration(string schema)
        {
            ToTable("tblButikAyarlar", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SiteAktif).HasColumnName(@"site_aktif").HasColumnType("int").IsOptional();
        }
    }

    // tblButikKullanicilar
    public class TblButikKullanicilarConfiguration : EntityTypeConfiguration<TblButikKullanicilar>
    {
        public TblButikKullanicilarConfiguration()
            : this("dbo")
        {
        }

        public TblButikKullanicilarConfiguration(string schema)
        {
            ToTable("tblButikKullanicilar", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Email).HasColumnName(@"email").HasColumnType("nvarchar").IsRequired().HasMaxLength(320);
            Property(x => x.Parola).HasColumnName(@"parola").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.Ad).HasColumnName(@"ad").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Soyad).HasColumnName(@"soyad").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Rol).HasColumnName(@"rol").HasColumnType("int").IsRequired();
        }
    }

    // tblCihazlar
    public class TblCihazlarConfiguration : EntityTypeConfiguration<TblCihazlar>
    {
        public TblCihazlarConfiguration()
            : this("dbo")
        {
        }

        public TblCihazlarConfiguration(string schema)
        {
            ToTable("tblCihazlar", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType("int").IsRequired();
            Property(x => x.DeviceToken).HasColumnName(@"device_token").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
        }
    }

    // tblIletisim
    public class TblIletisimConfiguration : EntityTypeConfiguration<TblIletisim>
    {
        public TblIletisimConfiguration()
            : this("dbo")
        {
        }

        public TblIletisimConfiguration(string schema)
        {
            ToTable("tblIletisim", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.TelNo).HasColumnName(@"tel_no").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Mail).HasColumnName(@"mail").HasColumnType("nvarchar").IsOptional().HasMaxLength(320);
            Property(x => x.Instagram).HasColumnName(@"instagram").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Youtube).HasColumnName(@"youtube").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Adres).HasColumnName(@"adres").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // tblKategoriler
    public class TblKategorilerConfiguration : EntityTypeConfiguration<TblKategoriler>
    {
        public TblKategorilerConfiguration()
            : this("dbo")
        {
        }

        public TblKategorilerConfiguration(string schema)
        {
            ToTable("tblKategoriler", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.KategoriIsim).HasColumnName(@"kategori_isim").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
        }
    }

    // tblPayment
    public class TblPaymentConfiguration : EntityTypeConfiguration<TblPayment>
    {
        public TblPaymentConfiguration()
            : this("dbo")
        {
        }

        public TblPaymentConfiguration(string schema)
        {
            ToTable("tblPayment", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Token).HasColumnName(@"token").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.PaymentId).HasColumnName(@"payment_id").HasColumnType("int").IsRequired();
        }
    }

    // tblPaymentStatus
    public class TblPaymentStatuConfiguration : EntityTypeConfiguration<TblPaymentStatu>
    {
        public TblPaymentStatuConfiguration()
            : this("dbo")
        {
        }

        public TblPaymentStatuConfiguration(string schema)
        {
            ToTable("tblPaymentStatus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Success).HasColumnName(@"success").HasColumnType("int").IsRequired();
            Property(x => x.PaymentId).HasColumnName(@"payment_id").HasColumnType("int").IsRequired();
        }
    }

    // tblSepet
    public class TblSepetConfiguration : EntityTypeConfiguration<TblSepet>
    {
        public TblSepetConfiguration()
            : this("dbo")
        {
        }

        public TblSepetConfiguration(string schema)
        {
            ToTable("tblSepet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UrunId).HasColumnName(@"urun_id").HasColumnType("int").IsRequired();
            Property(x => x.KullaniciId).HasColumnName(@"kullanici_id").HasColumnType("int").IsRequired();
            Property(x => x.UrunBeden).HasColumnName(@"urun_beden").HasColumnType("int").IsRequired();
        }
    }

    // tblSiparisItemler
    public class TblSiparisItemlerConfiguration : EntityTypeConfiguration<TblSiparisItemler>
    {
        public TblSiparisItemlerConfiguration()
            : this("dbo")
        {
        }

        public TblSiparisItemlerConfiguration(string schema)
        {
            ToTable("tblSiparisItemler", schema);
            HasKey(x => x.SiparisUrunId);

            Property(x => x.SiparisUrunId).HasColumnName(@"siparis_urun_id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SiparisId).HasColumnName(@"siparis_id").HasColumnType("int").IsRequired();
            Property(x => x.UrunId).HasColumnName(@"urun_id").HasColumnType("int").IsRequired();
            Property(x => x.UrunBeden).HasColumnName(@"urun_beden").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.TblSiparisler).WithMany(b => b.TblSiparisItemlers).HasForeignKey(c => c.SiparisId).WillCascadeOnDelete(false); // FK_tblSiparisItemler_tblSiparisler
        }
    }

    // tblSiparisler
    public class TblSiparislerConfiguration : EntityTypeConfiguration<TblSiparisler>
    {
        public TblSiparislerConfiguration()
            : this("dbo")
        {
        }

        public TblSiparislerConfiguration(string schema)
        {
            ToTable("tblSiparisler", schema);
            HasKey(x => x.SiparisId);

            Property(x => x.SiparisId).HasColumnName(@"siparis_id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SiparisTarih).HasColumnName(@"siparis_tarih").HasColumnType("smalldatetime").IsRequired();
            Property(x => x.SiparisAdres).HasColumnName(@"siparis_adres").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SiparisKullaniciId).HasColumnName(@"siparis_kullanici_id").HasColumnType("int").IsOptional();
        }
    }

    // tblUrunBedenleri
    public class TblUrunBedenleriConfiguration : EntityTypeConfiguration<TblUrunBedenleri>
    {
        public TblUrunBedenleriConfiguration()
            : this("dbo")
        {
        }

        public TblUrunBedenleriConfiguration(string schema)
        {
            ToTable("tblUrunBedenleri", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UrunId).HasColumnName(@"UrunId").HasColumnType("int").IsRequired();
            Property(x => x.BedenId).HasColumnName(@"BedenId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.TblUrunTanim).WithMany(b => b.TblUrunBedenleris).HasForeignKey(c => c.UrunId).WillCascadeOnDelete(false); // FK_tblUrunBedenleri_tblUrunTanim
        }
    }

    // tblUrunFoto
    public class TblUrunFotoConfiguration : EntityTypeConfiguration<TblUrunFoto>
    {
        public TblUrunFotoConfiguration()
            : this("dbo")
        {
        }

        public TblUrunFotoConfiguration(string schema)
        {
            ToTable("tblUrunFoto", schema);
            HasKey(x => x.FotoId);

            Property(x => x.FotoId).HasColumnName(@"foto_id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UrunId).HasColumnName(@"urun_id").HasColumnType("int").IsRequired();
            Property(x => x.UrunFoto).HasColumnName(@"urun_foto").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasRequired(a => a.TblUrunTanim).WithMany(b => b.TblUrunFotoes).HasForeignKey(c => c.UrunId).WillCascadeOnDelete(false); // FK_tblUrunFoto_tblUrunTanim
        }
    }

    // tblUrunTanim
    public class TblUrunTanimConfiguration : EntityTypeConfiguration<TblUrunTanim>
    {
        public TblUrunTanimConfiguration()
            : this("dbo")
        {
        }

        public TblUrunTanimConfiguration(string schema)
        {
            ToTable("tblUrunTanim", schema);
            HasKey(x => x.UrunId);

            Property(x => x.UrunId).HasColumnName(@"urun_id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UrunIsim).HasColumnName(@"urun_isim").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.UrunFiyat).HasColumnName(@"urun_fiyat").HasColumnType("decimal").IsRequired().HasPrecision(10,2);
            Property(x => x.UrunIndirim).HasColumnName(@"urun_indirim").HasColumnType("int").IsRequired();
            Property(x => x.UrunEskiFiyat).HasColumnName(@"urun_eski_fiyat").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.UrunAciklama).HasColumnName(@"urun_aciklama").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.UrunKategori).HasColumnName(@"urun_kategori").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
        }
    }


    #endregion

    #region Stored procedure return models

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class AspnetAnyDataInTablesReturnModel
    {
        public class ResultSetModel1
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
        public class ResultSetModel4
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel4> ResultSet4;
        public class ResultSetModel5
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel5> ResultSet5;
        public class ResultSetModel6
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel6> ResultSet6;
        public class ResultSetModel7
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel7> ResultSet7;
    }

    public class AspnetMembershipGetPasswordReturnModel
    {
        public string Column1 { get; set; }
        public Int32? Column2 { get; set; }
    }

    public class AspnetMembershipGetPasswordWithFormatReturnModel
    {
        public string Column1 { get; set; }
        public Int32? Column2 { get; set; }
        public string Column3 { get; set; }
        public Int32? Column4 { get; set; }
        public Int32? Column5 { get; set; }
        public bool? Column6 { get; set; }
        public DateTime? Column7 { get; set; }
        public DateTime? Column8 { get; set; }
    }

    public class AspnetMembershipGetUserByEmailReturnModel
    {
        public class ResultSetModel1
        {
            public string UserName { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public string UserName { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
    }

    public class AspnetMembershipGetUserByNameReturnModel
    {
        public class ResultSetModel1
        {
            public string Email { get; set; }
            public string PasswordQuestion { get; set; }
            public string Comment { get; set; }
            public bool IsApproved { get; set; }
            public DateTime CreateDate { get; set; }
            public DateTime LastLoginDate { get; set; }
            public DateTime LastActivityDate { get; set; }
            public DateTime LastPasswordChangedDate { get; set; }
            public Guid UserId { get; set; }
            public bool IsLockedOut { get; set; }
            public DateTime LastLockoutDate { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public string Email { get; set; }
            public string PasswordQuestion { get; set; }
            public string Comment { get; set; }
            public bool IsApproved { get; set; }
            public DateTime CreateDate { get; set; }
            public DateTime LastLoginDate { get; set; }
            public DateTime LastActivityDate { get; set; }
            public DateTime LastPasswordChangedDate { get; set; }
            public Guid UserId { get; set; }
            public bool IsLockedOut { get; set; }
            public DateTime LastLockoutDate { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
    }

    public class AspnetMembershipGetUserByUserIdReturnModel
    {
        public string Email { get; set; }
        public string PasswordQuestion { get; set; }
        public string Comment { get; set; }
        public bool IsApproved { get; set; }
        public DateTime CreateDate { get; set; }
        public DateTime LastLoginDate { get; set; }
        public DateTime LastActivityDate { get; set; }
        public DateTime LastPasswordChangedDate { get; set; }
        public string UserName { get; set; }
        public bool IsLockedOut { get; set; }
        public DateTime LastLockoutDate { get; set; }
    }

    public class AspnetPersonalizationAllUsersGetPageSettingsReturnModel
    {
        public byte[] PageSettings { get; set; }
    }

    public class AspnetPersonalizationPerUserGetPageSettingsReturnModel
    {
        public byte[] PageSettings { get; set; }
    }

    public class AspnetProfileDeleteInactiveProfilesReturnModel
    {
        public class ResultSetModel1
        {
            public Int32? Column1 { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public Int32? Column1 { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
    }

    public class AspnetProfileDeleteProfilesReturnModel
    {
        public Int32? Column1 { get; set; }
    }

    public class AspnetProfileGetNumberOfInactiveProfilesReturnModel
    {
        public class ResultSetModel1
        {
            public Int32? Column1 { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public Int32? Column1 { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
    }

    public class AspnetProfileGetPropertiesReturnModel
    {
        public string PropertyNames { get; set; }
        public string PropertyValuesString { get; set; }
        public byte[] PropertyValuesBinary { get; set; }
    }

    public class AspnetRolesGetAllRolesReturnModel
    {
        public string RoleName { get; set; }
    }

    public class AspnetUsersInRolesAddUsersToRolesReturnModel
    {
        public class ResultSetModel1
        {
            public string Name { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public string UserName { get; set; }
            public string RoleName { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
    }

    public class AspnetUsersInRolesFindUsersInRoleReturnModel
    {
        public string UserName { get; set; }
    }

    public class AspnetUsersInRolesGetRolesForUserReturnModel
    {
        public string RoleName { get; set; }
    }

    public class AspnetUsersInRolesGetUsersInRolesReturnModel
    {
        public string UserName { get; set; }
    }

    public class AspnetUsersInRolesRemoveUsersFromRolesReturnModel
    {
        public class ResultSetModel1
        {
            public string Column1 { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public string Name { get; set; }
            public string Column1 { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public string UserName { get; set; }
            public string RoleName { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
    }


    #endregion

}
// </auto-generated>
